# -*- coding: utf-8 -*-
"""interference.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1C9bm8D03otOUc9f6BZFM-OMPoR2FZfF_
"""

import networkx as nx
import matplotlib.pyplot as plt
import random
from math import *
import numpy as np
import copy
import threading
import time
import scipy.stats
import pandas as pd
import itertools
from itertools import chain
from collections import Counter
import queue
from collections import defaultdict
from datetime import datetime

#logistic function for displaying the created networkx graph
def printGraph(gra):
  fig, ax = plt.subplots(figsize=(20, 10))
  posi = dict()
  for nds in range(gra.number_of_nodes()):
    posi[nds] = gra.nodes[nds]['pos'] #tupples (x,y)
  nx.draw(gra,posi, with_labels = True, **{'node_color' : 'orange', 'node_size' : 400})

#heuristic function for calculating the air-distance between two nodes in the snapshot of the network
def heuristicAirDistance(graph, node1, node2):
  airDist = np.linalg.norm(np.array(graph.nodes[node1]['pos'])-np.array(graph.nodes[node2]['pos']))
  return (airDist)

#function to initialise the reward and q-table
def rAndQs(graph, goalNode):
  n = graph.number_of_nodes()
  hW = 0.7

  #initialising the reward values for every state-action pair according to heuristic algorithm discussed in the paper
  global R
  R= np.zeros(shape = (n,n))
  for u in range(n) :
    for v in graph[u]:
      R[u][v] = (1/( hW*heuristicAirDistance(graph,v,goalNode) + (1-hW)*heuristicAirDistance(graph,u,v) ) )

  for v in graph[goalNode] :
    R[v][goalNode] = R[v][goalNode] + 100

  #Qtable initialisation
  global Q
  Q= np.zeros(shape = (n,n))
  Q -= 200
  for nds in range(n):
    for nbs in graph[nds]:
      Q[nds][nbs] = 0
      Q[nbs][nds] = 0

  return

#function to select the next state/action for a given state according to the exploration rate
def nextState(graph, startNode, exploreRate):
  #action following exploration
  if (random.random()<=exploreRate):
    sample = list(dict(graph[startNode]).keys())

  #action following exploitation
  else :
    sample = np.where(Q[startNode,] == np.max(Q[startNode,]))[0]

  nextNode = int(random.choice(sample))

  return nextNode

#function to update the Qtable for a given state-action pair
def updateQs(node1, node2, alpha, discount):
  #calculating the future discounted reward
  futureSample = np.where(Q[node2,] == np.max(Q[node2,]))[0]
  if futureSample.shape[0] > 1:
    futureNextState = int(random.choice(futureSample))
  else :
    futureNextState = int(futureSample)
  maxValue = Q[node2,futureNextState]

  #Updating the qtable according to the reinforcement learning algorithm explained in the paper
  Q[node1,node2] = ((1-alpha)*Q[node1,node2] + alpha*(R[node1,node2] + discount*maxValue))

#function that initialises and deploys the qlearning agent
def qLearnModel(graph, goalNode, exploreRate, alpha, discount):
  rAndQs(graph, goalNode)

  n = graph.number_of_nodes()

  #Training the qlearning agent for 80000 epochs
  for i in range(80000):
    start = random.randint(0,n-1)
    if len(graph[start]) >=1 :
      #setting the decaying learning rate
      alpha = alpha**(0.85 * (i//1000))
      nextNode = nextState(graph, start, exploreRate)
      updateQs(start, nextNode, alpha, discount)

  return Q

#Function that deploys the Dynamic LPWAN Network and also the qlearning agent on it to extract qtable for each snapshot of the graph
def FspatGraph(N, limit, goalNode = 0, distribution = "poisson", printGraph = True, embarkingNow = True, previousG = None, probOfMobilizing = 1.0, exploreRate = 0.5, alpha = 0.8, discount = 0.8):

  #Creating the network for the first snapshot of the network
  if embarkingNow == True :
    global spatG
    spatG = nx.Graph()
    points = []

    #creating the IoD nodes
    for nodes in range(N):
      points.append(nodes)
    #[0,1,2,3,4,5,6...,N-1]

    #setting the IoD nodes positions according to poisson distribution
    global pos
    pos = dict()

    for nd in range(N):
      if nd == goalNode :
        pos[nd] = [2000,2000]
      elif distribution == "random":
        pos[nd] = [random.uniform(0,300), random.uniform(0,300)]

      elif distribution == "normal":
        Mean = 0
        SD = 100
        pos[nd] = [Mean+np.random.normal(0,1)*SD, Mean+np.random.normal(0,1)*SD]
      elif distribution == "poisson":
        xMin, xMax, yMin, yMax = 0, 4000, 0, 4000
        xDelta=xMax-xMin
        yDelta=yMax-yMin
        areaTotal=xDelta*yDelta

        lambda0=2; #intensity (ie mean density) of the Poisson process
        xx = xDelta*scipy.stats.uniform.rvs(0,1, size =1 )+xMin#x coordinates of Poisson points
        yy = yDelta*scipy.stats.uniform.rvs(0,1, size = 1) +yMin#y coordinates of Poisson points

        pos[nd] = [*xx, *yy]  #unpacking of list xx and yy

      spatG.add_node(nd,pos = pos[nd])
      #1st snapshot

  else:
    #taking the node positions from previous snapshot of the network
    N = previousG.number_of_nodes()
    pos = dict()

    #determining the probability of mobility of IoD devices according to probability distribution
    shift = []
    for i in range(N):
      if i != goalNode :
        shift.append(random.random())
      else :
        shift.append(2)

    shift = [p<=probOfMobilizing for p in shift]
    previousG.remove_edges_from(previousG.edges())

    #determining the random position of the IoD in future snapshot within the radio range
    for nd in range(N):
      pos[nd] = previousG.nodes[nd]['pos']
      if shift[nd] == 1:
        previousX = previousG.nodes[nd]['pos'][0]
        previousY = previousG.nodes[nd]['pos'][1]

        newX = random.uniform(previousX-limit, previousX + limit)
        while newX >= 4000 :
          newX = random.uniform(previousX-limit, previousX + limit)

        yLowLimit = -1*( ( limit**2 - (newX-previousX)**2 )**0.5) + previousY  # "Y" coord should lie within circle of radius equal to limit.
        yHighLimit =  ( limit**2 - (newX-previousX)**2 )**0.5 + previousY
        newY = random.uniform( yLowLimit , yHighLimit )
        while newY >= 4000 :
          yLowLimit = -1*( ( limit**2 - (newX-previousX)**2 )**0.5) + previousY
          yHighLimit =  ( limit**2 - (newX-previousX)**2 )**0.5 + previousY
          newY = random.uniform( yLowLimit , yHighLimit )

        previousG.nodes[nd]['pos'] = [newX, newY]
        pos[nd] = [newX, newY]

    spatG = previousG

  dist = np.empty((N,N))

  #calculating changed distances and edge connections between the moves IoDs
  connects = []
  for u in range(dist.shape[0]):
    for v in range(dist.shape[1]):
      point1 = np.array(spatG.nodes[u]['pos'])
      point2 = np.array(spatG.nodes[v]['pos'])

      dist[u][v] = np.linalg.norm(point1-point2)
      dist[u][v] = (dist[u][v]<=limit)*dist[u][v]

      if dist[u][v] != 0:
        connects.append((u,v, dist[u][v])) # list of tupples --->  connects

  spatG.add_weighted_edges_from(connects)

  #Displaying the snapshot of the graph
  if printGraph == True :
    fig, ax = plt.subplots(figsize=(20, 10))
    nx.draw(spatG,pos, with_labels = True, **{'node_color' : 'orange', 'node_size' : 400})

  #Deploying and extracting the Qtable of each of the snapshot of the network
  qTable = qLearnModel(spatG, goalNode, exploreRate, alpha, discount)


  #storing the qtable values in individual nodes
  for nds in range(N):
    qChunk = {}
    for nbs in spatG[nds]:
      qChunk[nbs] = qTable[nds][nbs]

    spatG.nodes[nds]['qChunk'] =  qChunk


  for nds in range(N):
    alloted_queue = {}
    if nds == 0:
      max_ele = 20000
      alloted_queue[0] = queue.Queue(maxsize = max_ele)

    else:
      max_ele = 50
      alloted_queue[nds] = queue.Queue(maxsize = max_ele)

    spatG.nodes[nds]['alloted_queue'] =  alloted_queue

  # print(list(spatG.nodes[10]['alloted_queue'][10].queue))

  return spatG, pos, qTable

#################################################################### Graph Creation Ends Here ###########################################################################################

#Energy of all the IoDs are initialised
enen=[]
enee=[]
for i in range(400):
  enen.append(i)
  enee.append(0)
ene=dict(zip(enen,enee))
for i in ene:
  ene[i]=72000
ene[0]=10000000

#function to determine the shortestpath calculation
def shortestPath1(graph, QTable, sourceNode, goalNode, cords, exploreRate=0.5, alpha=0.8, discount=0.8):

  #looking up the learned qtable for each snapshot of the network
  qTable = copy.deepcopy(QTable)
  count = 0
  tolerance = 0
  #performing the shortest path search algorithm according the residual energies of the IoD devices
  if ene[sourceNode]>1:
    path = [sourceNode]
  else:
    return [], qTable

  nextNode = np.argmax(qTable[sourceNode,])
  tic = time.time()
  toc = tic

  db = round(((sqrt(((cords[sourceNode][0]-cords[nextNode][0])**2)+((cords[sourceNode][1]-cords[nextNode][1])**2) ))),2)

  startEngDeduction = 0
  while nextNode != goalNode :

    #Condition when qtable and the residual energies of the nodes both support q-learning algorithm
    if nextNode not in path and ene[nextNode] >1:

      path.append(nextNode)
      db = round(((sqrt(((cords[path[-2]][0]-cords[nextNode][0])**2)+((cords[path[-2]][1]-cords[nextNode][1])**2) ))),2)
      startEngDeduction = 1

      #deducing the energy of transmission according to distance models
      if db<=520 and startEngDeduction != 0:
          e=0.3256*pow(10,-3)+(0.000041*pow(db,2))
          ene[path[-2]]=ene[path[-2]]-e

      elif db>520 and startEngDeduction != 0:
          e=0.3256*pow(10,-3)+((2*pow(10,-10)*pow(db,4)))
          ene[path[-2]]=ene[path[-2]]-e

      nextNode = np.argmax(qTable[nextNode,])

    #Condition when qtable best node can't be used due to low residual energy, then the next best node until 3 or less attempts is tried out
    elif (nextNode in path and tolerance == 0) or (ene[nextNode] <=1 and tolerance == 0) :
      count = 0
      while count < min(4,len(graph[path[-1]])-1) :
        count += 1
        if count == 1 :
          qChunk = {}
          for nbs in graph[path[-1]]:
            qChunk[nbs] = qTable[path[-1]][nbs]
          listOfQmax = sorted(qChunk.items(), key=lambda item: item[1], reverse = True)
          listOfQmax = [t[0] for t in listOfQmax]  #separating keys

        #chosing the next best node with required residual energy
        if ene[listOfQmax[count]]>1:
          nextNode = listOfQmax[count]

        #if next node has energy make it the next node
        if nextNode not in path and ene[nextNode] >1 :
          break
      #if no suitable IoD is selected after 3 attempts tolerance is lost and direct hop is executed
      if count >= 4 or count >= len(graph[path[-1]])-1:
        tolerance = 1

    #condition for executing a direct hop transmission
    elif (nextNode in path and tolerance == 1) or (ene[nextNode] <=1 and tolerance == 1):
      #path.append("--Kinked path to-- ")
      db = round(((sqrt(((cords[path[-1]][0]-cords[0][0])**2)+((cords[path[-1]][1]-cords[0][1])**2) ))),2)
      if db<=520 :
          e=0.3256*pow(10,-3)+(0.000041*pow(db,2))
          ene[path[-1]]=ene[path[-1]]-e

      else:
          e=0.3256*pow(10,-3)+(2*pow(10,-10)*pow(db,4))
          ene[path[-1]]=ene[path[-1]]-e

      break

  path.append(goalNode)

  return path, qTable


#logistic function to find the best exploration rate

def shortestPathConclusion(graph, sourceNode, goalNode, alpha, discount):
  sps = []
  spls =[]
  qtables = []
  exploreRates = [0.0 + i/10 for i in range(10)]

  for exploreRate in exploreRates :
    sp, qtable= shortestPath1(graph, sourceNode, goalNode, exploreRate, alpha, exploreRate)
    sps.append(sp)
    qtables.append(qtable)
    length = 0
    for i in range(len(sp)-1):
      if type(sp[i+1]) == type("str") :
        length = float('inf')
        break
      length += graph[sp[i]][sp[i+1]]['weight']
    spls.append(length)

  print("\nAll experimented paths : ", sps)
  return sps[spls.index(min(spls))], qtables[spls.index(min(spls))]

################################################################# Functions Related To Shortest Path End Here #########################################################################

def dijkstra(graph, start, goal):
    import heapq
    queue = [(0, start)]
    shortest_paths = {start: (None, 0)}

    while queue:
        (cost, node) = heapq.heappop(queue)
        if node == goal:
            break

        for neighbor in graph[node]:
            old_cost = shortest_paths.get(neighbor, (None, float('inf')))[1]
            new_cost = cost + graph[node][neighbor]['weight']
            if new_cost < old_cost:
                shortest_paths[neighbor] = (node, new_cost)
                heapq.heappush(queue, (new_cost, neighbor))

    if goal not in shortest_paths:
        return [], float('inf')

    path = []
    while goal is not None:
        path.append(goal)
        next_node = shortest_paths[goal][0]
        goal = next_node

    path.reverse()
    return path, shortest_paths[path[-1]][1]

def direct_hop_transmission(spatGraph, nds, radioRange):
  path = []
  if ene[nds] >0:
    path.append(nds)
    path.append(0)
  db = heuristicAirDistance(spatGraph, nds, 0)
  if db <= 520:
    e=0.3256*pow(10,-3)+(0.000041*pow(db,2))
    ene[nds]=ene[nds]-e
  else:
    e=0.3256*pow(10,-3)+(2*pow(10,-10)*pow(db,4))
    ene[nds]=ene[nds]-e

  return path

# def is_queue_full(graph,node_id):
#       queue_of_node = graph.nodes[node_id]['alloted_queue'][node_id]
#       return queue_of_node.full()

# def is_queue_empty(graph,node_id):
#     queue_of_node = graph.nodes[node_id]['alloted_queue'][node_id]
#     return queue_of_node.empty()

# def send_rts(graph, current_node, next_node):
#   if is_queue_empty(graph,current_node) == False:
#     print(f"RTS from {current_node} to {next_node}")
#     return True
#   return False

# def send_cts(graph, current_node, next_node):
#   if is_queue_full(graph,next_node) == False:
#     print(f"CTS from {next_node} to {current_node}")
#     return True
#   return False

# global this_list
# this_list = {}
# for i in range(400):
#   this_list[i] = 0

# def transmit_data(graph,current_node, next_node, data):
#   global RTS,CTS
#   RTS = False
#   CTS = False
#   timing = 0

#   # tic = time.time()
#   RTS = send_rts(graph, current_node, next_node)
#   if RTS:

#     CTS = send_cts(graph, current_node, next_node)

#     if CTS:
#       tic = time.time()
#       # print(f"before {current_node} ------>> {len(list(graph.nodes[current_node]['alloted_queue'][current_node].queue))}")
#       # ###graph.nodes[current_node]['alloted_queue'][current_node] -= 1
#       list_of_data_current_node = graph.nodes[current_node]['alloted_queue'][current_node]
#       put_data = list_of_data_current_node.get()


#       # print(f"after {current_node} <<------ {len(list(graph.nodes[current_node]['alloted_queue'][current_node].queue))}")
#       # print(f"before {next_node} ------>>  {len(list(graph.nodes[next_node]['alloted_queue'][next_node].queue))}")
#       graph.nodes[next_node]['alloted_queue'][next_node].put(put_data)

#       # print(f"after {next_node} <<------  {len(list(graph.nodes[next_node]['alloted_queue'][next_node].queue))}")
#       # print(f"Node {current_node} transmittED data to {next_node}\n")
#       toc = time.time()
#       timing = toc-tic
#       # return timing
#     else:
#       print(f" NO CTS : why ? {next_node} <<------ {len(list(graph.nodes[next_node]['alloted_queue'][next_node].queue))} : FULL")

#   else:
#     print(f"NO RTS : why ? {current_node} ------>> {len(list(graph.nodes[current_node]['alloted_queue'][current_node].queue))} : EMPTY")
#   this_list[current_node] += timing
#   return timing

def is_queue_full(graph, node_id):
    queue_of_node = graph.nodes[node_id]['alloted_queue'][node_id]
    return queue_of_node.full()

def is_queue_empty(graph, node_id):
    queue_of_node = graph.nodes[node_id]['alloted_queue'][node_id]
    return queue_of_node.empty()

global this_list
this_list = {}
for i in range(400):
  this_list[i] = 0

def transmit_data(graph,current_node, next_node, data):

    timing = 0
    tic = time.time()
    print(f"before {current_node} ------>> {len(list(graph.nodes[current_node]['alloted_queue'][current_node].queue))}")
    list_of_data_current_node = graph.nodes[current_node]['alloted_queue'][current_node]
    put_data = list_of_data_current_node.get()


    # print(f"after {current_node} <<------ {len(list(graph.nodes[current_node]['alloted_queue'][current_node].queue))}")

    # print(f"before {next_node} ------>>  {len(list(graph.nodes[next_node]['alloted_queue'][next_node].queue))}")
    if graph.nodes[next_node]['alloted_queue'][next_node].full() == False:
      graph.nodes[next_node]['alloted_queue'][next_node].put(put_data)

    # print(f"after {next_node} <<------  {len(list(graph.nodes[next_node]['alloted_queue'][next_node].queue))}")
    # print(f"Node {current_node} transmittED data to {next_node}\n")
    toc = time.time()
    timing = toc-tic
    this_list[current_node] += timing
    return timing

def simulate_sensor_readings():
    # Simulate temperature and humidity readings
    temperature = 20 + random.gauss(0, 5)  # Mean temperature around 20°C with some noise
    humidity = 50 + random.gauss(0, 10)  # Mean humidity around 50% with some noise
    return temperature, humidity

def get_time_of_day_factor():
    # Simulate time of day factor (day: 1, night: 0.5)
    hour = datetime.now().hour
    return 1 if 6 <= hour < 18 else 0.5

def get_battery_level():
    # Simulate battery level between 20% and 100%
    return 20 + random.random() * 80

def get_proximity_to_events():
    # Simulate proximity to events (closer: higher value)
    return random.random()

def get_weather_condition():
    # Simulate different weather conditions (clear: 1, rainy: 0.8, foggy: 0.6)
    weather_conditions = {'clear': 1, 'rainy': 0.8, 'foggy': 0.6}
    return weather_conditions[random.choice(list(weather_conditions.keys()))]

def get_node_health():
    # Simulate node health (good: 1, degraded: 0.7, bad: 0.4)
    health_status = {'good': 1, 'degraded': 0.7, 'bad': 0.4}
    return health_status[random.choice(list(health_status.keys()))]

def get_movement_vibration():
    # Simulate movement or vibration (no: 1, slight: 1.2, high: 1.5)
    movement_status = {'no': 1, 'slight': 1.2, 'high': 1.5}
    return movement_status[random.choice(list(movement_status.keys()))]

def get_node_density():
    # Simulate node density (few neighbors: 1, moderate: 0.9, high: 0.8)
    density_status = {'few': 1, 'moderate': 0.9, 'high': 0.8}
    return density_status[random.choice(list(density_status.keys()))]

def generate_data_based_on_conditions(temperature, humidity, time_of_day, battery_level, proximity, weather, health, movement, density):
    base_count = 4

    # Adjust base count based on conditions
    base_count *= time_of_day
    base_count *= (battery_level / 100)
    base_count *= (1 + proximity)
    base_count *= weather
    base_count *= health
    base_count *= movement
    base_count *= density

    # Further adjust based on temperature and humidity
    if temperature > 25 and humidity > 60:
        base_count *= 1.25
    elif temperature > 20 and humidity > 50:
        base_count *= 1.1

    return int(base_count)

global ls_tx, ls_rx
ls_rx =[]
ls_tx =[]
Gpath = {}
gen_data = []

#function to execute the dynamic LPWAN as a whole for a totalDuration's time
def executeSimulation(NumberOfNodes, radioRange, probabilityOfMobilizing, totalDuration):

  global figCount
  figCount = 1
  listOfGraphs =[]
  timingToGraph = 0

  while  timingToGraph <= totalDuration:
    tic = time.time()
    if figCount == 1:

      spatGraph,positions,qTable = FspatGraph(NumberOfNodes,radioRange, printGraph = False) #Any function

    else :

      spatGraph,positions,qTable = FspatGraph(_,radioRange, printGraph = False, embarkingNow= False, previousG= spatGraph, probOfMobilizing= probabilityOfMobilizing)

    toc = time.time()
    timingToGraph += toc-tic

#-----------------------------------------------------------------------------
    for nds in range(1,NumberOfNodes):

      temperature, humidity = simulate_sensor_readings()
      time_of_day = get_time_of_day_factor()
      battery_level = get_battery_level()
      proximity = get_proximity_to_events()
      weather = get_weather_condition()
      health = get_node_health()
      movement = get_movement_vibration()
      density = get_node_density()

      no_of_data = generate_data_based_on_conditions(temperature, humidity, time_of_day, battery_level, proximity, weather, health, movement, density)
      if no_of_data > 4:
        no_of_data = 4
      if no_of_data < 1:
        no_of_data = 1

      for i in range(no_of_data):
        spatGraph.nodes[nds]['alloted_queue'][nds].put(f"Node{nds}")

#-----------------------------------------------------------------------------
    spath={}
    for nds in range(400):
      if nds == 0 :
        continue
      if len(spatGraph[nds]) >=1 :
        # sp,_ = shortestPath1(spatGraph, qTable, nds, 0, positions) # exploreRate=0.5, alpha = 0.8, discount =0.8)
        # sp, _ = dijkstra(spatGraph, nds, 0)
        sp = direct_hop_transmission(spatGraph, nds, radioRange)
        if len(sp)>1:
          spath[nds] =sp

    Gpath[figCount-1] = spath
    #Gpath = {0:{0:[], 1:[],  2:[]}, 1:{0:[], 1:[], 2:[]}, 2:{0:[], 1:[], 2:[]}}

    eligible_nodes = []
    eligible_nodes.append(list(spath.keys()))
    print(eligible_nodes)

#----------------------------------------------^^^^^^^^^^^^^^^^-------------------------
    temp_queues = {}
    for nd in spatGraph.nodes:
      temp_queues[nd] = spatGraph.nodes[nd]['alloted_queue']
      del spatGraph.nodes[nd]['alloted_queue']

    gra, graPos,graQt  = copy.deepcopy(spatGraph),copy.deepcopy(positions),copy.deepcopy(qTable)

    for nd in spatGraph.nodes:
        spatGraph.nodes[nd]['alloted_queue'] = temp_queues[nd]

    listOfGraphs.append([gra, graPos, graQt])
#----------------------------------------------------------------------------

    tx_data = 0
    for nds in range(400):
      tx_data += len(list(spatGraph.nodes[nds]['alloted_queue'][nds].queue))

    for nds in range(1,400):
      print(list(spatGraph.nodes[nds]['alloted_queue'][nds].queue))
    gen_data.append(tx_data)
#-----------------------------------------------------------------------

    # remaining_data = 0
    received = 0
    timing = 0

    while  timing < (toc-tic):

      nodes_having_data = []
      for nds in range(1,400):
        if nds in eligible_nodes[0]:
          if is_queue_empty(spatGraph,nds) == False:
            nodes_having_data.append(nds)
      print(f"Nodes having data : {nodes_having_data}")

      received = len(list(spatGraph.nodes[0]['alloted_queue'][0].queue))
      print(f"\n--------->> {len(list(spatGraph.nodes[0]['alloted_queue'][0].queue))} <<----- data in Goal node.------>> {tx_data} <<-----Total data-------Graphs = {figCount}\n")
      # print(nodes_having_data)

      if len(nodes_having_data)>0:
        select_node = random.choice(nodes_having_data)
        nextNode = spath[select_node][1]
      else:
        break
      print("----------------------")
      timing += transmit_data(spatGraph,select_node,nextNode, f"Data to {nextNode}")


    ls_tx.append(timing)
    print("\n\nDONE..!")
    print(this_list)
    print(f"--------->> {len(list(spatGraph.nodes[0]['alloted_queue'][0].queue))} <<------data in Goal node.----->> {tx_data} <<-----Total data")
    ls_rx.append(len(list(spatGraph.nodes[0]['alloted_queue'][0].queue)))

  #-----------------------------------------------^^^^^^^^^^^^^^^^^^^-------------------------
    remaining_data = 0
    for nds in range(1,400):
      remaining_data += len(list(spatGraph.nodes[nds]['alloted_queue'][nds].queue))
    print(remaining_data)

    for nds in range(400):
      print(list(spatGraph.nodes[nds]['alloted_queue'][nds].queue))

    print(ls_rx)
    print(ls_tx)
    print(gen_data)
    print("\n\n")
    figCount += 1
#----------------------------------------------------------------------------

  print("Stats :\n")
  print("\nTotal duration of the simulation set : ", totalDuration)
  print("\nTotal duration of time simulation used : ", timingToGraph)
  print("\nTime taken per one screen shot of network : ", (timingToGraph)/(len(listOfGraphs)))
  print("\nTotal output screen shots generated : ", len(listOfGraphs))
  # print(list(spatG.nodes[10]['alloted_queue'][10].queue))
  print("\n\n")

  return listOfGraphs

Graphs = executeSimulation(400, 520 , 0.4, 10)    #(400,520 , 0.4, 1000)

print(this_list)

total_time = 0

for value in this_list.values():
  total_time += value
print(total_time)

abc2 = []
for key, value in this_list.items():
  abc2.append(value*100/total_time)
print(abc2)

import matplotlib.pyplot as plt
import matplotlib
matplotlib.rc('figure', figsize=(12, 7))
matplotlib.rcParams['legend.handlelength'] = 0

device = [i for i in range(400)]
marker = [i for i in range(1,400)]

fig, ax = plt.subplots()
intOpt = [0.0, 0.21034791931028146, 0.009547837058263514, 0.02455740374644084, 0.15094141979088305, 0.801182749779111, 0.14213743770087273, 0.07297930524149764, 0.25790368830805704, 0.02142913696214319, 0.4215925405001009, 0.1466107573044775, 0.03035539658118144, 0.584731143811519, 0.34430295236036906, 0.04317415754094184, 0.09855568839650447, 0.022152612342225056, 0.05249781912932083, 0.061138764513960595, 0.11231191041214564, 0.36838143578478383, 0.1096829435380453, 0.007407980300274892, 0.012727052812989463, 0.06754814499384079, 0.2325005316525065, 0.3374248413525485, 0.03910842970076346, 0.006307482539023602, 0.10331432223450775, 0.013858119956497737, 0.022529634723394476, 0.14164832758476104, 0.028500854057591295, 0.1505949667919706, 0.2087990706092611, 0.32539069453738395, 0.9418732367198199, 0.04720931599886324, 0.07663744131824961, 0.1651256131581219, 0.2980310974173866, 0.03773280749919935, 0.04578274482687082, 0.042430302572688657, 0.1627004421657348, 0.026360997299602677, 0.2960542773647685, 0.13462755945974125, 0.1830596507488837, 2.159309074898146, 0.08949696145435264, 0.13348630252214727, 0.09890214139541692, 0.01973763114392361, 0.17204448334228511, 0.017607964180020655, 0.054219894329797395, 0.18376274654079422, 0.12465175104988, 0.12864615033145874, 0.013593185310270574, 0.05934536075488442, 0.03816077885079707, 0.026401756475945316, 0.02340595701476125, 1.0183068821563561, 2.4780050747212514, 0.09184061409405447, 0.08000007336651743, 0.04146227213455094, 0.12425434908053924, 0.1571368145949644, 0.007937849592729217, 1.2054832097158468, 0.9668688016119442, 0.010811371524885363, 0.021082683963230747, 0.11166995338474904, 0.032505443133255714, 0.11663238310446551, 0.05124447445678464, 0.025617142331349485, 0.025505054596407232, 0.011147634729712147, 0.23096187274557184, 0.38525573479063707, 0.11152729626754979, 0.7022602287955226, 0.029957994611840694, 0.03181253713543082, 0.06163806442415794, 0.016436137860169737, 2.000990244189245, 0.04324548609954145, 0.012890089518360027, 0.2967573731566791, 0.028205350029107158, 0.13308890055280656, 0.030365586375267095, 0.1472017653614458, 0.018586184412244022, 0.01627310115479918, 0.2388895325442154, 0.1282996973325463, 0.09031214498120545, 0.026717640092600782, 0.07720806978704657, 0.47294910269182794, 0.07230677883184407, 1.1341750307043974, 0.03249525333917006, 0.05267104562877705, 0.0354197242417545, 0.2439946193811311, 0.22954549136766508, 0.04940012172728016, 0.014897478953235066, 0.8402809896857888, 0.32334254592616635, 0.018504666059558743, 0.06258571527412432, 0.04966505637350733, 0.045395532651615736, 0.05736854070226636, 0.020175792289607, 0.062565335685953, 0.029519833466157313, 0.10419064452587451, 0.6499254463715725, 0.48067296660875825, 0.04747425064509039, 0.025413346449636286, 0.22291193541790036, 0.026391566681859657, 0.012034146815164577, 0.4300704491793702, 0.13256922105443786, 0.03467586927350132, 0.025433726037807608, 0.020593573847119063, 0.06072098295644854, 0.016915058182195766, 0.08396390326583922, 0.5103048878098578, 0.12884994621317197, 0.08510516020343314, 0.04807544849614435, 0.039281656200219686, 0.008274112797555999, 0.07315253174095385, 0.42183709555815685, 0.12137063735429744, 0.06012997489948026, 0.06656992476161741, 0.008854931060438625, 0.06197432762898472, 0.20551795691367855, 0.036367375091720895, 0.08877348607427078, 0.09195270182899674, 0.0757203598505402, 0.5265983685528282, 0.04016816828567212, 0.981593054065723, 0.1083582703069095, 0.048533989229999054, 0.19126243498784007, 0.34799165781937796, 1.4519743286479645, 0.029764388524213155, 0.0247204404518114, 1.2746107727929648, 0.00921157385343673, 0.21813292199172574, 0.007713674122844695, 0.06336013962463449, 0.014438938219380363, 0.22361503120981088, 0.008977208589466549, 0.019870098467037193, 0.26624912966421277, 0.6917036021227788, 0.02326329989756201, 0.44041309017631514, 0.00821297403304204, 0.043785545186081444, 0.015559815568802971, 0.4269727517773296, 0.01923833123372627, 0.5413226210066071, 0.5606628501811899, 0.2577406516026865, 0.4990145959629463, 0.42014558973993715, 0.06884224884271964, 0.06944344669377357, 0.09845379045564788, 0.03216917992842893, 1.090807267075828, 0.24698022904822944, 0.013124454782330208, 0.009853530880833315, 0.05743986926086598, 0.06931097937065998, 0.011738642786680435, 0.5317136451838296, 0.0770246534935047, 0.05517773497384943, 0.597926927152449, 0.8798072009440643, 0.03701952191320314, 0.18556634009395603, 0.3576719622007551, 0.006470519244394163, 0.02974400893604183, 0.50447632559286, 1.0189488391837527, 0.00924214323569371, 0.12476383878482224, 0.15960274476369413, 0.04501851027044632, 0.11186355947237658, 0.212069994510758, 0.24262918697365266, 0.06268761321498093, 0.011188393906054786, 0.020899267669688866, 0.02519936077383742, 0.030233119052153517, 0.1388257546230332, 0.31949080376178673, 0.49537683947436567, 0.22055809298411286, 0.03369764904127794, 0.22653950211239535, 0.24243558088602507, 0.49298223786423556, 0.022499065341137495, 0.09555988893532041, 3.3996719497692074, 0.03678515664923296, 0.032158990134343264, 0.11290291846911389, 0.04645527123652439, 0.11931229894899412, 0.15388627028163882, 0.02468987106955442, 0.8072456772600787, 0.04725007517520588, 0.07739148608058846, 0.022376787812109573, 0.03967905816956043, 0.25870868204082426, 0.39992903827398757, 0.7133365349666352, 0.3147016005415265, 0.26474104013953503, 0.03736597491211558, 0.2365866390808562, 0.013358820046300391, 0.10523000352261186, 0.240010409893638, 2.4329152358922053, 0.3431718852168608, 0.5908246406747438, 0.0531703455389744, 0.01963573320306701, 0.30391060860481245, 0.8295409467195031, 0.7277550935978443, 0.025994164712518916, 0.007886900622300916, 0.3360492191509844, 0.5670416612788132, 0.09503001964286609, 0.8800823253843771, 0.0815693016557091, 0.10384419152696207, 0.027186370620541148, 0.5202603166315476, 0.16289404825336234, 0.14504152901528583, 0.07343784597535234, 0.08635850487596934, 0.0503885317535892, 0.14310546813901046, 0.027665290942567165, 0.0745179641484323, 0.1719935343718568, 0.09489755231975251, 0.3860301591411472, 1.0242577219023816, 0.779060706819143, 0.28944110100317516, 0.8090492708132405, 0.08684761499208103, 0.212069994510758, 0.5624868233225231, 0.28741333198012875, 0.20617010373516081, 0.03258696148594099, 0.05548342879641924, 0.009456128911492572, 0.5758864025451662, 0.257037555810776, 0.6709368017762036, 0.08793792295924666, 0.39862474463102304, 0.011799781551194394, 0.011799781551194394, 0.01572285227417353, 0.02980514770055579, 2.0732970230210888, 0.008029557739500157, 0.3107173910540334, 0.027013144121084923, 0.07490517632368739, 0.7145083612864861, 0.47414130859985015, 0.030406345551609735, 2.3132666737383847, 0.05843846908126067, 0.1433704027852376, 0.039138999083020445, 0.42472080728439865, 0.6026040426377669, 0.2644353463169652, 0.08530895608514635, 0.1284831136260882, 0.09550893996489211, 0.4419415592891642, 0.11539941802010063, 0.014031346455953959, 0.022611153076079755, 0.2354148127610053, 0.11373848158413803, 0.5230115610346758, 0.6719557811847696, 0.14131206437993427, 0.0745179641484323, 0.3035743453999857, 0.7905853639300244, 0.06464405367942766, 0.8454777846694755, 0.008783602501839004, 0.014571405542493941, 0.045629897915585915, 0.22774189781450319, 0.04865626675902697, 1.1597921730357468, 0.09236029359242313, 0.12157443323601065, 0.01745511726873575, 1.5391276374626153, 0.029163190673159207, 0.007683104740587714, 0.16765268209136563, 0.06280989074400885, 0.0767189596709349, 0.3763702343479414, 0.21942702584060458, 0.03219974931068591, 0.1382347465660649, 1.9699623211984099, 0.06755833478792644, 0.1412509256154203, 0.14259597843472743, 0.008467718885183544, 0.08144702412668117, 0.1182423705699998, 0.08763222913667686, 0.27538937495904986, 0.6925901142082314, 0.14759916733078654, 0.3467688825290989, 0.15099236876131136, 0.08071335895251365, 0.09409255858698536, 0.07673933925910621, 0.03524649774229828, 1.2818760959760407, 0.1609376077889156, 0.14895440994417933, 0.17966644931835885, 0.8393842878062507, 0.3058874286574305, 0.021581983873428093, 0.48977245272725256, 0.010016567586203878, 0.1832124976601686, 0.09359325867678801, 0.19069180651904308, 0.03093621484406406, 0.27662234004341474, 0.1646976418065242, 0.2653218584024176, 0.1919655307797506, 0.18273357733814258]
intPro = [0.0, 0.07504626037444817, 0.06375611500838074, 0.09845670885408797, 0.16387313935747863, 0.4582470766227366, 0.15523949878342708, 0.025402827073651702, 0.18927596643113034, 0.04233804512275284, 0.17151059063452426, 0.09264560462155327, 0.050805654147303404, 0.06757484064690356, 0.1251877883237476, 0.3415268973235396, 0.13083286100678132, 0.15772997202594194, 0.11871255789320895, 0.1097468542201554, 0.2468889141079744, 0.30367170403731353, 1.349338402794558, 0.10659225477963656, 0.11804843169520497, 0.02623298482115666, 0.33654595083850986, 0.12136906268522481, 0.14079475397684083, 0.11788240014570399, 0.09231354152255129, 0.3989738134508826, 0.06973325079041644, 0.058443105424349016, 0.6749182487215306, 0.10426781308662268, 0.024240606227144763, 0.15640171962993402, 0.08168752235448783, 0.12651604071975556, 0.08932497363153344, 0.157231877377439, 0.5922345370700368, 0.21501085660378402, 0.18678549318861548, 0.23045179070737623, 0.0665786513498976, 0.19093628192614026, 0.04449645526626573, 0.06392214655788174, 0.2533641445385131, 1.7564477621709893, 0.07338594487943825, 0.030881868207184426, 0.050473591048301424, 0.12219922043272977, 0.42802933461355613, 0.09247957307205228, 0.35746592607563477, 0.09696242490857905, 0.3823706585007835, 0.06691071444889958, 0.17715566331755797, 0.1607185399169598, 0.6584811253209324, 0.2666466684985924, 0.06126564176586587, 0.023410448479639804, 0.12120303113572381, 0.02689711101916063, 0.235266705642905, 0.21849751914330484, 0.8469269340045578, 0.6302557619057638, 0.04781708625628556, 0.11472780070518515, 0.11223732746267027, 0.21617307745029096, 0.13863634383332793, 0.025402827073651702, 0.24738700875647737, 0.4804953042558695, 0.12319540972973571, 0.07869895446346999, 0.058111042325347036, 0.22663306506885345, 0.04433042371676474, 0.3760614596197458, 1.6578250217674004, 0.05246596964231332, 0.04682089695927961, 0.3999700027478886, 0.059439294721354966, 1.2440744004109294, 0.08467609024550568, 0.15955631907045287, 0.036360909340717146, 0.14345125876885667, 0.09513607786406815, 0.627267194014746, 0.1137316114081792, 0.2651523845530835, 0.05645072683033712, 0.1507566469469003, 0.11887858944270993, 0.08334783784949774, 0.40727539092593223, 0.0843440271465037, 0.07753673361696305, 0.16985027513951434, 0.1427871325708527, 0.03586281469221417, 0.08998909982953741, 0.06707674599840058, 0.568159962392393, 0.2314479800043822, 0.3403646764770326, 0.6760804695680375, 0.031047899756685416, 0.05163581189480836, 0.0665786513498976, 0.0841779955970027, 0.4350026596925978, 0.047152960058281596, 0.06757484064690356, 0.03685900398922012, 0.2905552116267352, 0.11788240014570399, 0.47634451551834467, 0.1647032971049836, 0.06757484064690356, 0.13382142889779916, 0.7766955885656384, 0.11356557985867821, 0.09247957307205228, 0.04682089695927961, 0.027395205667663604, 0.07371800797844023, 0.08467609024550568, 0.06375611500838074, 0.15972235061995385, 0.62793132021275, 0.06508436740438868, 0.23958352592993076, 1.4149208648474498, 0.3433532443680505, 0.3003510730472937, 0.03569678314271318, 1.8265130760604078, 0.11090907506666234, 0.03486662539520822, 0.04150788737524788, 0.06359008345887976, 0.06442024120638472, 0.1608845714664608, 0.036692972439719126, 0.1356477759423101, 0.19492103911416406, 0.41059602191595207, 0.235266705642905, 0.05379422203832126, 0.2978605998047788, 0.06973325079041644, 0.27777078231515884, 0.5724767826794188, 0.09878877195308997, 0.215508951252287, 0.684714110142089, 0.4298556816580671, 0.10044908744809987, 0.18844580868362537, 0.12834238776426646, 0.020089817489619976, 0.03901741413273301, 0.04183995047424986, 0.5557075961798187, 0.41292046360896595, 0.19558516531216802, 0.2563527124295309, 0.22580290732134847, 0.11738430549720101, 0.031213931306186406, 0.15059061539739932, 0.027561237217164594, 0.10958082267065442, 0.10044908744809987, 0.11672017929919705, 0.41026395881695005, 0.07388403952794123, 0.024074574677643772, 0.2633260375085726, 0.06940118769141446, 0.28723458063671536, 0.3687560714417022, 0.09247957307205228, 0.11074304351716135, 0.02689711101916063, 0.3269161209674523, 0.06608055670139462, 0.07338594487943825, 0.4914533865229349, 0.08467609024550568, 0.030881868207184426, 0.06226183106287182, 0.7939628697137415, 0.1295046086107734, 0.7380102375319073, 0.025734890172653686, 0.045990739211774656, 0.050805654147303404, 0.0803592699584799, 0.02822536341516856, 0.10709034942813954, 0.03304027835069731, 0.09712845645808005, 0.08052530150798089, 0.050805654147303404, 0.09596623561157311, 0.08484212179500666, 0.0901551313790384, 0.025568858623152696, 0.07637451277045611, 0.038685351033731025, 0.6134865754061637, 0.21268641491077014, 0.2058791213812295, 0.06325802035987778, 0.1686880542930074, 0.029719647360677483, 0.05562056908283216, 0.08932497363153344, 0.050639622597802414, 0.10011702434909789, 0.0333723414496993, 0.05429231668682423, 0.39515508781235986, 0.9296106456560516, 0.2116902256137642, 0.08351386939899874, 0.07454816572594519, 0.06574849360239264, 0.6941779084636456, 0.035032656944709216, 0.8117282455103476, 0.07786879671596503, 0.6186335534406945, 0.03569678314271318, 0.4970984592059686, 0.7521229192394916, 0.03304027835069731, 0.10061511899760087, 0.12253128353173175, 0.04267010822175482, 0.10543003393312962, 0.029387584261675502, 0.13631190214031405, 0.04466248681576672, 0.17981216810957382, 0.03403646764770326, 0.13813824918482495, 0.3840309739957934, 0.22447465492534055, 0.13282523960079323, 0.058443105424349016, 0.3297386573089692, 0.11107510661616334, 0.09928686660159293, 0.05113771724630539, 0.07803482826546602, 0.10293956069061475, 0.02390854312814278, 0.02590092172215468, 0.046986928508780605, 0.047485023157283576, 0.27361999357763406, 0.1803102627580768, 0.08600434264151362, 0.06757484064690356, 1.700827193088157, 0.047485023157283576, 0.26299397440957056, 0.20289055349021165, 0.02606695327165567, 0.30184535699280257, 0.2610015958155587, 0.14793411060538345, 0.1550734672339261, 0.3192786696904067, 0.03436853074670525, 0.16503536020398557, 0.03934947723173499, 0.6838839523945841, 0.03287424680119632, 0.11738430549720101, 0.534898402340203, 1.4600814463117195, 0.22630100196985145, 0.10958082267065442, 0.05977135782035695, 0.03254218370219434, 0.22829338056386336, 0.776213539206079, 0.6076064020490348, 0.20670927912873446, 0.14743601595688047, 1.2216601412282957, 1.644542497807321, 0.2973625051562758, 0.07272181868143429, 0.09397385701756121, 0.0647523043053867, 0.11356557985867821, 0.2004000802476968, 0.16802392809500344, 0.03204408905369136, 0.1485982368033874, 1.2793700513300479, 0.16370710780797765, 0.058775168523351004, 0.5057320997800202, 0.2666466684985924, 0.1037697184381197, 0.04017963497923995, 0.05528850598383018, 0.06342405190937876, 0.1859553354411105, 0.05860913697385001, 0.19757754390617993, 0.10227543449261078, 0.028557426514170543, 0.05329612738981828, 0.02789330031616658, 0.1019433713936088, 0.10161130829460681, 0.07471419727544619, 0.07089547163692338, 0.10758844407664252, 0.06209579951337083, 0.14577570046187055, 0.5973815151045675, 0.09513607786406815, 0.1195427156407139, 0.06707674599840058, 0.8886008529293067, 0.05628469528083613, 0.11456176915568415, 0.04682089695927961, 0.07288785023093527, 0.05545453753333117, 0.04034566652874094, 0.05412628513732324, 0.05744691612734307, 0.3810424061047756, 0.11804843169520497, 0.036194877791216155, 1.3820466180462534, 0.056782789929339106, 0.04532661301377069, 0.1117392328141673, 0.03187805750419037, 0.21036197321775627, 0.19807563855468288, 0.028723458063671534, 0.08932497363153344, 0.23858733663292483, 0.14942839455089238, 0.09928686660159293, 0.03038377355868145, 1.2854162562366764, 0.42005982023750854, 0.057945010775846045, 1.5749752785664057, 0.14760204750638148, 0.9153319323989663, 0.20670927912873446, 1.27761277341013, 1.2402556747724067, 0.07670657586945809, 0.32957262575946816, 0.49494004906245576, 0.6055170610301162, 0.6357348030392965, 0.9588321983682261, 0.3347196037939989, 0.04001360342973896, 0.13299127115029422, 0.09928686660159293, 0.11622208465069407, 0.10426781308662268, 0.10327162378961673, 0.05595263218183415, 0.07587641812195313, 1.45011955334166, 0.04416439216726375, 0.5723107511299178, 0.1590582244219499, 0.8867745058847958, 0.13431952354630214, 0.09148338377504633, 0.2312819484548812]
intDij = [0.0, 0.22397402816490655, 1.9355576202423566, 0.10340685125547758, 0.036926478536836185, 0.525914043838004, 0.019412050924946092, 0.09813164003592954, 0.0048575524999280445, 0.009887616210133907, 0.10658468933954265, 0.028809372116395674, 0.046478151863797494, 0.10715670019467437, 0.01243896621476901, 0.007218232219519244, 0.18697491332900604, 0.03176022176588467, 1.2942880539527901, 0.4438622645074437, 0.14777855044640908, 0.21065434682398237, 0.08536581047537098, 0.1980791875484677, 0.027919577452857454, 1.961397983634497, 0.19678081370269254, 0.9473498510093313, 0.015498770312854527, 0.008026311046610078, 0.2887202092433867, 0.042419598653577244, 0.31507810626636074, 0.24405796485619782, 0.009233889518554807, 0.008543844677443532, 0.020946492742680373, 0.0412937360180799, 2.722117943735378, 0.033893913050899796, 0.5511279191507146, 0.5226272513053424, 0.12692285307755913, 0.03649974027983316, 0.079046452456773, 0.06716133802236962, 0.6114342064488867, 0.032141562335972484, 0.03624551323310795, 0.12370869684396188, 0.007517856953159666, 0.23438825754325696, 0.011894193971786426, 0.040676327476032975, 0.07113817539614249, 0.034139060560241956, 1.5247902694961046, 0.027311248448193565, 0.024060774065064145, 0.027365725672491827, 0.6064858585751283, 0.1818086565580545, 0.02197248046696424, 0.3002693807946175, 0.11088839005910507, 0.031088335999539488, 0.20443486371659786, 0.01459081657455022, 0.01529902049042758, 0.3976111010782223, 0.007254550369051416, 0.19118781867473802, 0.04671421983575662, 0.012311852691406408, 0.05602982519075881, 0.13676507160077783, 0.0477856052469557, 0.3753934731019159, 0.43575423762438625, 0.20095740089889236, 0.17676043377308256, 0.009379162116683496, 0.013928010345588077, 0.0062104035700014625, 0.03677212640132445, 0.005774585775615395, 0.14969433283423117, 0.31458781124767643, 0.053015418779588507, 0.04450789225167715, 0.3402465838921562, 0.6168819288787125, 0.018958074055793937, 0.049764944396459086, 0.15401619262855967, 0.34606656735468677, 0.03210524418644031, 0.28370830460794694, 0.8538306159639877, 0.12566987691869919, 0.004966506948524562, 0.017350995938995313, 0.02915439453695131, 0.1189691783300134, 0.2920342403881974, 0.18965337685700373, 0.7554265898065669, 0.038451840817187416, 0.0536237477842524, 1.186087206959066, 1.2323383703882873, 0.40502000358278545, 0.06677091791489877, 0.010341593079286062, 0.09173056618088418, 0.055421496186094925, 0.3720158851954239, 0.7332634390545587, 0.23883723086094807, 0.026693839906146637, 0.06402889762521975, 0.020274606976335183, 0.010032888808262598, 0.26680220600072074, 0.06329345509719327, 0.03107925646215644, 0.02100096996697863, 1.3094690404572382, 0.17235685814230667, 0.007581413714840967, 0.16366774086673447, 0.025586136345415383, 0.013292442728775061, 0.012902022621304209, 0.1672632376704195, 0.05304265739173764, 0.1855131078103361, 0.010886365322268646, 0.13479481198865748, 0.09602518736306355, 0.4210544666012395, 0.014209476004462412, 0.17408197024508487, 1.3450880656109163, 0.5281203714220835, 0.020056698079142152, 0.21293331070712618, 0.8011420605301887, 1.7140078285587224, 0.0161888151539658, 0.13185304187655153, 0.014817805009126297, 0.013964328495120248, 0.007163754995220985, 0.07502421739608492, 0.13843570647925776, 0.031796539915416845, 0.08483919730715449, 2.1617561350661085, 0.31657622993456286, 0.05109963639176642, 0.06386546595232498, 0.05188047660670812, 0.007926436135396604, 0.29207963807511267, 0.006773334887750134, 0.018113677079170932, 0.07408902504563149, 0.2721500535193331, 0.01574391782219669, 0.015970906256772766, 0.046169447592774034, 2.1418537891224783, 0.12083048349353723, 0.017786813733381382, 0.03136980165841382, 0.29147130907044877, 0.022807797906204203, 0.8974941112390418, 0.16449397876859137, 0.029108996850036095, 0.03825209099476047, 0.33311914704646733, 0.7924347841798504, 0.5511642373002468, 0.02920887176124957, 0.03637262675647056, 0.16267807129198275, 0.07500605832131883, 0.01086820624750256, 0.010840967635353431, 0.07844720298949216, 0.1087456192367069, 0.11803398597955997, 0.004503450541989365, 0.22091422406682104, 0.2842076791640143, 0.744295076974956, 0.0239881377659998, 0.33764983620060585, 0.19745269946903773, 0.2214135986228884, 0.2611547337484679, 0.09191215692854504, 0.008144345032589638, 0.13990659153531074, 0.12897482852612688, 0.7314929292648653, 0.20078488968861455, 0.029190712686483482, 0.9892700751068412, 0.03130624489673252, 0.014254873691377627, 0.28371738414533, 0.015344418177342795, 0.006546346453174056, 0.009279287205470022, 0.24878840383276327, 0.10071930819009682, 0.06355676168130152, 0.645228244588573, 0.8347726669969803, 0.6705601538872632, 0.9335580337244889, 0.1831524280907449, 0.010977160696099077, 0.05259776005996853, 0.15831989334812208, 0.11411162583008536, 0.035864172663020145, 0.4616581577782081, 0.007635890939139225, 1.4414310367823864, 0.1584742454836338, 0.01225737546710815, 0.015171906967064977, 0.01588919042032538, 0.07194625422323332, 0.0626669670177633, 0.29888021157501193, 0.22422825521163176, 0.5813355400240989, 0.10036520623215814, 0.1375822299652517, 0.02401537637814893, 0.02067410662118908, 0.06784230332609785, 0.06254893303178374, 0.03780719366299136, 0.012974658920368552, 0.8390037314174783, 0.04594245915819795, 0.198987141286772, 1.254810225411319, 0.32011724951394965, 0.05234353301324332, 0.2539183424541826, 0.12285522032995584, 0.2398359799730828, 0.02022920928941997, 0.016397644513775792, 0.021037288116510802, 0.03744401216766964, 0.04682317428435313, 0.5637938738000597, 0.07996348573246036, 0.21614746694072343, 0.28901983397702713, 0.36613234497121194, 0.014699771023146737, 0.10988056140958728, 0.03837012498074003, 0.03263185735465681, 1.4767413576650408, 0.07869235049883433, 1.368032056577866, 0.010314354467136933, 0.009088616920426118, 0.8262015837073876, 0.5457709920947191, 1.0038518121440083, 0.03024393902291648, 0.008825310336317869, 0.27854204783699543, 0.27174147433709617, 0.06109620705049685, 0.16748114656761254, 0.015516929387620613, 0.5277390308519957, 0.07209152682136201, 0.07232759479332113, 0.02741112335940704, 0.3524676412097321, 1.925561049583626, 0.14452807606327966, 0.01086820624750256, 0.7982910857919132, 0.16842541845544903, 0.6847968685038748, 0.3234131215839943, 0.38391915870459337, 0.547822967543287, 0.5832876405614532, 0.027011623714553144, 0.49626935428236835, 0.26240770990732787, 0.30004239236004143, 0.01911242619130567, 0.4248860313768837, 0.007890117985864432, 0.08637363912488877, 0.09497196102663055, 0.2192435891883411, 0.32723560682225544, 0.015816554121261036, 0.009606150551259572, 0.5034875865018876, 0.48805237295071435, 0.12514326375048268, 0.35052462020976094, 0.24296842037023267, 0.008434890228847016, 0.07802954426987217, 0.09897603701255255, 0.2253541178471291, 0.09960252509198253, 0.1391439103951351, 0.0608329004663886, 0.021509424060429043, 0.16659135190407431, 0.04809430951797916, 0.020919254130531244, 0.020783061069785596, 0.010786490411055172, 0.1482052887034121, 0.1383993883297256, 0.06144122947105248, 0.22274829061819573, 0.07719422683063222, 0.005275211219548026, 1.7361800588481135, 0.23051129508069756, 0.07200981098491462, 0.02572232940616103, 0.052733953120714175, 0.1338959377877362, 0.14342945203993143, 0.120358347549619, 0.06818732574665348, 0.07819297594276696, 0.9900509153217829, 0.06007021932621298, 0.2916075021311944, 0.015353497714725838, 0.014817805009126297, 0.18497741510473656, 0.023570479046379822, 0.1157005448721179, 0.01305637475681594, 0.9117308258556533, 0.12095759701689983, 0.007454300191478364, 1.0753440894980895, 0.073144753157795, 0.3166488662336272, 0.014363828139974144, 0.4934728567683911, 0.012075784719447289, 0.010641217812926483, 0.027619952719217033, 0.15854688178269816, 0.3338727486492599, 0.012130261943745547, 0.4661525287828145, 0.04580626609745231, 0.04890238834507, 0.2481800748280994, 0.18089162328236716, 0.34732862305092976, 0.018204472453001365, 0.04269198477506853, 0.22205824577708447, 0.028727656279948287, 0.1615885268060176, 0.024768977980941506, 0.03965941928913215, 0.14188593068481412, 1.6996258413439822, 0.026512249158485778, 0.01898531266794307, 0.6799393160039467, 0.16155220865648542, 0.2302207498844402, 0.23051129508069756, 0.02920887176124957, 0.25156674227197445, 2.1219696022536136, 0.1299281799513464, 0.0896695111949334, 0.009015980621361773]
intDir = [0.0, 0.11546185662603084, 0.03570663763316821, 0.1384216923967034, 0.1489465746684888, 0.033718604315164304, 0.09351552803708574, 0.02584443313405079, 0.17697394634779878, 0.08790225749213354, 0.02272594949796623, 0.14793306748676133, 0.14212489171455384, 0.08618709149228702, 0.21517537088983466, 0.341240071878553, 1.3436766366979347, 1.4422207195982069, 0.02467500177051908, 0.112148467762691, 0.0985440829002721, 0.023466589361536314, 0.4396672116424719, 0.049155098313782876, 0.04576374735954092, 0.12115308926188516, 0.18328887571087002, 0.03566765658771716, 0.29847786501874346, 3.086870008223753, 0.0668135119031117, 0.08587524312867857, 0.042216472223494735, 1.5840727439946034, 0.16828117321221306, 0.0735182517206935, 0.06611185308499268, 0.05718519367670062, 0.05083128326817833, 0.1146822357170097, 0.1347964551697551, 0.07449277785696992, 0.30471483229091256, 0.26573378683985555, 0.1652796327124817, 0.02315474099792786, 0.1647338980761669, 0.21915143752584246, 0.029313746179194865, 0.1088740599448022, 0.08953946140107794, 0.04833649635931068, 1.451849037824618, 0.12512915589789297, 0.030210310224569176, 0.07168614258449382, 0.02182938545259192, 0.23556245766073744, 0.02186836649804298, 0.05332607017704598, 0.05893934072199818, 0.05940711326741087, 0.10275403580898625, 0.043931638223341236, 0.23922667593313682, 0.056717421131287936, 0.09460699730971533, 3.9181797835129943, 0.11826849189850694, 0.2849124612017756, 0.09164443785543501, 0.08552441371961905, 0.042840168950711646, 0.02077689722541338, 0.06135616553996372, 0.2752061808844624, 0.14146221394188585, 0.17354361434810575, 0.03621339122403195, 0.8138462669271681, 0.10068804040008023, 1.0999671405379263, 0.6893797888019431, 0.25602750652254236, 0.4037656687820484, 0.1252850800796972, 0.04529597481412823, 0.24655511247793552, 0.07043874913006, 0.025415641634089166, 1.3398954752891823, 0.10688602662679829, 0.1111349605809635, 0.1216598428527489, 0.1331592512608107, 0.0356286755422661, 0.05157192313174841, 0.14536031848699155, 0.12045143044376613, 0.044009600314243356, 0.0986220449911742, 0.25770369147693784, 0.15522252298610897, 0.26530499533989393, 0.0993626848547443, 0.05387180481336078, 0.2784026266114491, 0.09511375090057908, 0.1943594926189702, 2.8719285236066243, 0.023583532497889484, 2.4867957945501815, 0.06498140276691201, 0.18352276198357637, 0.22043781202572735, 1.2626350432051874, 0.10715889394495569, 0.03286102131524105, 0.03824040558748692, 0.07090652167547268, 0.10022026785466755, 0.054417539449675575, 0.21232975457190748, 0.027442655997544127, 0.05051943490456987, 0.14855676421397823, 0.0564835348585816, 0.14941434721390148, 0.03625237226948301, 0.030327253360922346, 0.19131897107378776, 0.07901457912929254, 1.4238996282362102, 0.02974253767915649, 0.08950048035562687, 0.034381282087832275, 0.2809753756112189, 0.09495782671877485, 0.06065450672184469, 0.04790770485934905, 0.09838815871846787, 0.08996825290103956, 0.02923578408829275, 0.06767109490303495, 0.23704373738787762, 0.15237690666818182, 0.5366520527247017, 0.06338317990341868, 0.04326896045067327, 0.02767654227025047, 0.11136884685366985, 0.09078685485551176, 0.047868723813898, 0.05242950613167167, 0.7963188296505547, 0.23478283675171632, 0.10119479399094397, 0.13830474926035025, 0.25236328825014304, 0.15915960857666572, 0.13655060221505266, 0.21817691138956602, 0.37643995592085744, 0.11908709385297914, 0.029547632451901205, 0.06552713740322681, 0.18211944434733832, 0.0509482264045315, 0.04467227808691132, 0.10049313517282495, 0.04767381858664271, 0.05270237344982907, 1.1195746063998082, 0.040501306223648226, 0.17779254830227098, 0.25107691375025815, 0.11620249648960092, 0.08727856076491662, 1.0283589600443348, 0.042801187905260586, 0.0938273764006942, 0.04182666176898416, 0.0876683712194272, 0.05196173358625898, 0.1713216947573955, 0.02432417236145957, 0.048258534268408565, 0.052624411358926954, 0.1083283253084874, 0.10891304099025326, 0.48051934727517964, 0.056054743358619964, 0.23723864261513292, 0.9242795686900125, 3.215741344484947, 0.1174888709894858, 0.03391350954241959, 0.1678913627577025, 0.1985304644822333, 0.31079587538127745, 0.10840628739938951, 0.1389674270330182, 0.23938260011494103, 0.19342394752814485, 0.03328981281520268, 0.0436977519506349, 0.1575613857131724, 0.07562322817505059, 0.05422263422242029, 0.43136424896139675, 0.11963282848929394, 0.10450818285428382, 0.12493425067063768, 0.6221764664443208, 0.2698657776576676, 0.02272594949796623, 0.12415462976161655, 0.039059007541959116, 0.05597678126771785, 0.0938273764006942, 0.03835734872384009, 0.07644183012952278, 0.034615168360538615, 0.026273224634012417, 0.2020777396182795, 0.05663945904038582, 0.09507476985512803, 0.03243222981527943, 0.05504123617689249, 1.444403658143466, 0.043307941496124325, 0.03909798858741017, 0.3473600960143689, 0.2625373411128689, 0.294735684655442, 0.05398874794971394, 0.0428791499961627, 0.20854859316315494, 0.21751423361689806, 0.15300060339539873, 0.07659775431132701, 0.09281386921896671, 0.23985037266035372, 1.8556147066066664, 0.07496055040238261, 0.07047773017551105, 0.08907168885566524, 0.22624598779793484, 0.02872903049742901, 0.023310665179732085, 0.08981232871923533, 0.019685427952783784, 0.1126942023990058, 0.2654999005671492, 0.02522073640683388, 0.0620968054035338, 0.155924181804228, 0.09343756594618363, 0.06728128444852438, 0.09250202085535826, 0.2724775077028884, 0.1297289192611177, 0.1455162426687958, 2.111720175220111, 0.165513518985188, 0.10411837239977324, 0.20601482520883624, 0.14220285380545594, 0.14711446553228913, 0.197633900436859, 1.269846536613633, 0.23844705502411567, 0.1726860313481825, 0.061901900176278515, 0.031535665769905116, 1.0096480582278273, 0.04455533495055815, 1.5145695399553687, 0.06081043090364892, 0.8680689011495883, 0.10883507889935115, 0.11253827821720155, 0.05831564399478127, 0.05398874794971394, 0.06084941194909998, 0.1177617383076432, 0.07418092949336147, 0.11783970039854531, 1.6623077022148747, 0.042216472223494735, 0.049700832950097674, 0.04510106958687295, 0.15553437134971743, 0.553296959132303, 0.22215297802557385, 0.04494514540506872, 0.06003080999462778, 0.10365059985436056, 0.2984388839732924, 0.07632488699316961, 0.12314112257988906, 0.024129267134204282, 0.05913424594925347, 1.2075158449373926, 0.04139787026902254, 0.1754147045297565, 0.021517537088983463, 0.11191458148998465, 0.16547453793973696, 0.11881422653482174, 0.19295617498273215, 0.052078676722612155, 0.12586979576146307, 0.031535665769905116, 0.023544551452438427, 0.25497501829536384, 0.1455942047596979, 0.05547002767685411, 0.09074787381006069, 0.02962559454280332, 0.21030274020845252, 0.2778568919751343, 0.12509017485244192, 1.043600548815698, 0.1103163586264913, 0.04007251472368659, 0.25298698497735994, 0.05005166235915719, 0.2699827207940208, 0.06069348776729575, 0.11090107430825717, 0.11515000826242237, 0.09499680776422591, 0.061901900176278515, 0.04977879504099979, 1.4215217844636956, 0.03636931540583618, 0.1898376913466476, 0.025805452088599735, 2.579570682723697, 0.4455923305510326, 0.311848363608456, 0.29777620620062445, 0.16356446671263516, 0.10209135803631829, 0.02444111549781274, 0.10084396458188447, 0.2581714640223505, 0.10938081353566595, 0.07616896281136538, 0.08225000590173027, 0.056093724404071024, 0.18761577175593736, 1.379383274331103, 2.3380051440634966, 0.17790949143862414, 0.06260355899439754, 0.29804907351878185, 0.175063875120697, 0.03301694549704528, 0.2935272722464592, 0.03512192195140236, 0.1055216900360113, 0.07523341772054001, 1.7817066444314622, 0.15892572230395938, 0.6812327503026722, 0.09429514894610688, 0.12318010362534013, 0.13249657348814275, 0.07991114317466685, 0.09402228162794948, 0.10879609785390008, 0.20574195789067884, 0.12844254476123282, 0.12879337417029232, 0.019646446907332728, 0.10743176126311309, 0.04950592772284239, 0.11109597953551245, 0.08786327644668247, 0.20141506184561153, 0.12041244939831508, 0.08139242290180701, 0.32085298510765015, 0.03734384154211261, 0.09059194962825647, 0.060147753130980953, 0.04790770485934905, 0.027091826588484615, 0.03325083176975162, 0.04673827349581734, 0.042762206859809526, 0.024285191316008512, 0.09285285026441778, 0.1918257246646515, 0.21689053688968116, 0.028417182133820554, 0.02900189781558641, 0.12937808985205818]

m1 = [i*10 for i in range(40)]
ax.plot(device, intOpt, color='b', label='OptRISQL without RTS-CTS', marker='o', markevery=m1, markersize=3)
ax.plot(device, intDir, color='black', label='Direct Transmission', marker='o', markevery=m1, markersize=3)
ax.plot(device, intDij, color='g', label='Conventional routing', marker='o', markevery=m1, markersize=3)
ax.plot(device, intPro, color='r', label='Proposed method', marker='o', markevery=m1, markersize=3)

ax.set_xlabel("Device Identification", fontsize=12)
ax.set_ylabel("Interference Ratio", fontsize=12)
ax.set_title("Interference", fontsize=15)
ax.legend(fontsize=10)

ax.set_xticks(range(0, len(device)+1, 40))
ax.set_xticklabels(range(0, len(device)+1, 40), rotation=90)

# Set fewer y-ticks
ax.set_yticks([0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4])

plt.show()

"""# **Data**"""

# without RTS-CTS
# {0: 0, 1: 0.004921674728393555, 2: 0.00022339820861816406, 3: 0.0005745887756347656, 4: 0.0035316944122314453, 5: 0.018745899200439453, 6: 0.0033257007598876953, 7: 0.0017075538635253906, 8: 0.006034374237060547, 9: 0.0005013942718505859, 10: 0.009864330291748047, 11: 0.0034303665161132812, 12: 0.0007102489471435547, 13: 0.013681411743164062, 14: 0.008055925369262695, 15: 0.0010101795196533203, 16: 0.0023059844970703125, 17: 0.0005183219909667969, 18: 0.00122833251953125, 19: 0.001430511474609375, 20: 0.002627849578857422, 21: 0.008619308471679688, 22: 0.0025663375854492188, 23: 0.00017333030700683594, 24: 0.00029778480529785156, 25: 0.0015804767608642578, 26: 0.0054399967193603516, 27: 0.00789499282836914, 28: 0.0009150505065917969, 29: 0.0001475811004638672, 30: 0.002417325973510742, 31: 0.000324249267578125, 32: 0.0005271434783935547, 33: 0.0033142566680908203, 34: 0.0006668567657470703, 35: 0.003523588180541992, 36: 0.004885435104370117, 37: 0.007613420486450195, 38: 0.022037744522094727, 39: 0.001104593276977539, 40: 0.0017931461334228516, 41: 0.0038635730743408203, 42: 0.0069732666015625, 43: 0.0008828639984130859, 44: 0.0010712146759033203, 45: 0.0009927749633789062, 46: 0.0038068294525146484, 47: 0.0006167888641357422, 48: 0.006927013397216797, 49: 0.0031499862670898438, 50: 0.00428318977355957, 51: 0.05052304267883301, 52: 0.0020940303802490234, 53: 0.0031232833862304688, 54: 0.0023140907287597656, 55: 0.00046181678771972656, 56: 0.004025459289550781, 57: 0.0004119873046875, 58: 0.001268625259399414, 59: 0.004299640655517578, 60: 0.002916574478149414, 61: 0.0030100345611572266, 62: 0.0003180503845214844, 63: 0.0013885498046875, 64: 0.0008928775787353516, 65: 0.0006177425384521484, 66: 0.0005476474761962891, 67: 0.023826122283935547, 68: 0.05797982215881348, 69: 0.002148866653442383, 70: 0.0018718242645263672, 71: 0.0009701251983642578, 72: 0.002907276153564453, 73: 0.0036766529083251953, 74: 0.0001857280731201172, 75: 0.02820563316345215, 76: 0.02262258529663086, 77: 0.0002529621124267578, 78: 0.0004932880401611328, 79: 0.0026128292083740234, 80: 0.0007605552673339844, 81: 0.0027289390563964844, 82: 0.0011990070343017578, 83: 0.0005993843078613281, 84: 0.0005967617034912109, 85: 0.0002608299255371094, 86: 0.005403995513916016, 87: 0.009014129638671875, 88: 0.0026094913482666016, 89: 0.016431331634521484, 90: 0.0007009506225585938, 91: 0.0007443428039550781, 92: 0.0014421939849853516, 93: 0.0003845691680908203, 94: 0.04681873321533203, 95: 0.0010118484497070312, 96: 0.00030159950256347656, 97: 0.006943464279174805, 98: 0.000659942626953125, 99: 0.003113985061645508, 100: 0.0007104873657226562, 101: 0.003444194793701172, 102: 0.00043487548828125, 103: 0.0003807544708251953, 104: 0.005589485168457031, 105: 0.0030019283294677734, 106: 0.0021131038665771484, 107: 0.0006251335144042969, 108: 0.001806497573852539, 109: 0.011065959930419922, 110: 0.0016918182373046875, 111: 0.026537179946899414, 112: 0.0007603168487548828, 113: 0.0012323856353759766, 114: 0.0008287429809570312, 115: 0.005708932876586914, 116: 0.0053708553314208984, 117: 0.001155853271484375, 118: 0.0003485679626464844, 119: 0.01966071128845215, 120: 0.007565498352050781, 121: 0.0004329681396484375, 122: 0.0014643669128417969, 123: 0.0011620521545410156, 124: 0.001062154769897461, 125: 0.0013422966003417969, 126: 0.00047206878662109375, 127: 0.0014638900756835938, 128: 0.0006906986236572266, 129: 0.0024378299713134766, 130: 0.01520681381225586, 131: 0.011246681213378906, 132: 0.0011107921600341797, 133: 0.0005946159362792969, 134: 0.005215644836425781, 135: 0.0006175041198730469, 136: 0.0002815723419189453, 137: 0.010062694549560547, 138: 0.003101825714111328, 139: 0.0008113384246826172, 140: 0.0005950927734375, 141: 0.0004818439483642578, 142: 0.001420736312866211, 143: 0.00039577484130859375, 144: 0.001964569091796875, 145: 0.01194000244140625, 146: 0.003014802932739258, 147: 0.00199127197265625, 148: 0.0011248588562011719, 149: 0.0009191036224365234, 150: 0.00019359588623046875, 151: 0.0017116069793701172, 152: 0.009870052337646484, 153: 0.002839803695678711, 154: 0.0014069080352783203, 155: 0.0015575885772705078, 156: 0.0002071857452392578, 157: 0.0014500617980957031, 158: 0.004808664321899414, 159: 0.0008509159088134766, 160: 0.0020771026611328125, 161: 0.0021514892578125, 162: 0.001771688461303711, 163: 0.012321233749389648, 164: 0.0009398460388183594, 165: 0.022967100143432617, 166: 0.0025353431701660156, 167: 0.0011355876922607422, 168: 0.004475116729736328, 169: 0.008142232894897461, 170: 0.033972978591918945, 171: 0.0006964206695556641, 172: 0.0005784034729003906, 173: 0.02982306480407715, 174: 0.0002155303955078125, 175: 0.0051038265228271484, 176: 0.0001804828643798828, 177: 0.0014824867248535156, 178: 0.00033783912658691406, 179: 0.005232095718383789, 180: 0.00021004676818847656, 181: 0.0004649162292480469, 182: 0.0062296390533447266, 183: 0.016184329986572266, 184: 0.0005443096160888672, 185: 0.010304689407348633, 186: 0.00019216537475585938, 187: 0.001024484634399414, 188: 0.00036406517028808594, 189: 0.009990215301513672, 190: 0.00045013427734375, 191: 0.012665748596191406, 192: 0.013118267059326172, 193: 0.006030559539794922, 194: 0.011675834655761719, 195: 0.009830474853515625, 196: 0.0016107559204101562, 197: 0.0016248226165771484, 198: 0.002303600311279297, 199: 0.0007526874542236328, 200: 0.025522470474243164, 201: 0.005778789520263672, 202: 0.0003070831298828125, 203: 0.00023055076599121094, 204: 0.0013439655303955078, 205: 0.0016217231750488281, 206: 0.000274658203125, 207: 0.012440919876098633, 208: 0.001802206039428711, 209: 0.001291036605834961, 210: 0.013990163803100586, 211: 0.02058553695678711, 212: 0.0008661746978759766, 213: 0.004341840744018555, 214: 0.008368730545043945, 215: 0.0001513957977294922, 216: 0.0006959438323974609, 217: 0.011803627014160156, 218: 0.023841142654418945, 219: 0.0002162456512451172, 220: 0.0029191970825195312, 221: 0.0037343502044677734, 222: 0.0010533332824707031, 223: 0.002617359161376953, 224: 0.004961967468261719, 225: 0.005676984786987305, 226: 0.0014667510986328125, 227: 0.0002617835998535156, 228: 0.0004889965057373047, 229: 0.0005896091461181641, 230: 0.0007073879241943359, 231: 0.0032482147216796875, 232: 0.007475376129150391, 233: 0.011590719223022461, 234: 0.00516057014465332, 235: 0.0007884502410888672, 236: 0.0053005218505859375, 237: 0.005672454833984375, 238: 0.011534690856933594, 239: 0.00052642822265625, 240: 0.002235889434814453, 241: 0.0795447826385498, 242: 0.0008606910705566406, 243: 0.0007524490356445312, 244: 0.0026416778564453125, 245: 0.0010869503021240234, 246: 0.0027916431427001953, 247: 0.003600597381591797, 248: 0.0005776882171630859, 249: 0.018887758255004883, 250: 0.0011055469512939453, 251: 0.0018107891082763672, 252: 0.0005235671997070312, 253: 0.0009284019470214844, 254: 0.00605320930480957, 255: 0.009357452392578125, 256: 0.016690492630004883, 257: 0.007363319396972656, 258: 0.006194353103637695, 259: 0.0008742809295654297, 260: 0.005535602569580078, 261: 0.00031256675720214844, 262: 0.002462148666381836, 263: 0.005615711212158203, 264: 0.05692481994628906, 265: 0.008029460906982422, 266: 0.013823986053466797, 267: 0.0012440681457519531, 268: 0.00045943260192871094, 269: 0.0071108341217041016, 270: 0.0194094181060791, 271: 0.017027854919433594, 272: 0.0006082057952880859, 273: 0.00018453598022460938, 274: 0.00786280632019043, 275: 0.01326751708984375, 276: 0.002223491668701172, 277: 0.02059197425842285, 278: 0.0019085407257080078, 279: 0.0024297237396240234, 280: 0.0006361007690429688, 281: 0.012172937393188477, 282: 0.003811359405517578, 283: 0.0033936500549316406, 284: 0.001718282699584961, 285: 0.002020597457885742, 286: 0.0011789798736572266, 287: 0.0033483505249023438, 288: 0.0006473064422607422, 289: 0.0017435550689697266, 290: 0.0040242671966552734, 291: 0.0022203922271728516, 292: 0.009032249450683594, 293: 0.02396535873413086, 294: 0.01822829246520996, 295: 0.006772279739379883, 296: 0.01892995834350586, 297: 0.002032041549682617, 298: 0.004961967468261719, 299: 0.013160943984985352, 300: 0.006724834442138672, 301: 0.004823923110961914, 302: 0.0007624626159667969, 303: 0.0012981891632080078, 304: 0.00022125244140625, 305: 0.013474464416503906, 306: 0.006014108657836914, 307: 0.01569843292236328, 308: 0.0020575523376464844, 309: 0.009326934814453125, 310: 0.0002760887145996094, 311: 0.0002760887145996094, 312: 0.00036787986755371094, 313: 0.0006973743438720703, 314: 0.04851055145263672, 315: 0.00018787384033203125, 316: 0.007270097732543945, 317: 0.0006320476531982422, 318: 0.001752614974975586, 319: 0.016717910766601562, 320: 0.011093854904174805, 321: 0.0007114410400390625, 322: 0.054125308990478516, 323: 0.001367330551147461, 324: 0.0033545494079589844, 325: 0.0009157657623291016, 326: 0.009937524795532227, 327: 0.014099597930908203, 328: 0.0061872005462646484, 329: 0.0019960403442382812, 330: 0.0030062198638916016, 331: 0.0022346973419189453, 332: 0.010340452194213867, 333: 0.0027000904083251953, 334: 0.00032830238342285156, 335: 0.0005290508270263672, 336: 0.0055081844329833984, 337: 0.0026612281799316406, 338: 0.012237310409545898, 339: 0.015722274780273438, 340: 0.0033063888549804688, 341: 0.0017435550689697266, 342: 0.00710296630859375, 343: 0.018497943878173828, 344: 0.0015125274658203125, 345: 0.019782304763793945, 346: 0.00020551681518554688, 347: 0.0003409385681152344, 348: 0.0010676383972167969, 349: 0.005328655242919922, 350: 0.001138448715209961, 351: 0.027136564254760742, 352: 0.0021610260009765625, 353: 0.002844572067260742, 354: 0.00040841102600097656, 355: 0.03601217269897461, 356: 0.0006823539733886719, 357: 0.00017976760864257812, 358: 0.003922700881958008, 359: 0.0014696121215820312, 360: 0.001795053482055664, 361: 0.008806228637695312, 362: 0.005134105682373047, 363: 0.0007534027099609375, 364: 0.003234386444091797, 365: 0.04609274864196777, 366: 0.0015807151794433594, 367: 0.0033049583435058594, 368: 0.0033364295959472656, 369: 0.00019812583923339844, 370: 0.001905679702758789, 371: 0.0027666091918945312, 372: 0.0020503997802734375, 373: 0.006443500518798828, 374: 0.0162050724029541, 375: 0.003453493118286133, 376: 0.008113622665405273, 377: 0.003532886505126953, 378: 0.0018885135650634766, 379: 0.002201557159423828, 380: 0.0017955303192138672, 381: 0.0008246898651123047, 382: 0.029993057250976562, 383: 0.003765583038330078, 384: 0.0034852027893066406, 385: 0.00420379638671875, 386: 0.01963973045349121, 387: 0.007157087326049805, 388: 0.0005049705505371094, 389: 0.011459589004516602, 390: 0.00023436546325683594, 391: 0.004286766052246094, 392: 0.0021898746490478516, 393: 0.004461765289306641, 394: 0.0007238388061523438, 395: 0.006472349166870117, 396: 0.0038535594940185547, 397: 0.006207942962646484, 398: 0.004491567611694336, 399: 0.00427556037902832}


# with RTS-CTS
# {0: 0, 1: 0.00010776519775390625, 2: 9.1552734375e-05, 3: 0.00014138221740722656, 4: 0.0002353191375732422, 5: 0.0006580352783203125, 6: 0.00022292137145996094, 7: 3.647804260253906e-05, 8: 0.00027179718017578125, 9: 6.079673767089844e-05, 10: 0.00024628639221191406, 11: 0.00013303756713867188, 12: 7.295608520507812e-05, 13: 9.703636169433594e-05, 14: 0.00017976760864257812, 15: 0.0004904270172119141, 16: 0.00018787384033203125, 17: 0.00022649765014648438, 18: 0.0001704692840576172, 19: 0.0001575946807861328, 20: 0.00035452842712402344, 21: 0.0004360675811767578, 22: 0.0019376277923583984, 23: 0.00015306472778320312, 24: 0.00016951560974121094, 25: 3.7670135498046875e-05, 26: 0.0004832744598388672, 27: 0.0001742839813232422, 28: 0.000202178955078125, 29: 0.00016927719116210938, 30: 0.00013256072998046875, 31: 0.0005729198455810547, 32: 0.00010013580322265625, 33: 8.392333984375e-05, 34: 0.0009691715240478516, 35: 0.00014972686767578125, 36: 3.4809112548828125e-05, 37: 0.00022459030151367188, 38: 0.00011730194091796875, 39: 0.00018167495727539062, 40: 0.00012826919555664062, 41: 0.0002257823944091797, 42: 0.0008504390716552734, 43: 0.00030875205993652344, 44: 0.0002682209014892578, 45: 0.00033092498779296875, 46: 9.560585021972656e-05, 47: 0.0002741813659667969, 48: 6.389617919921875e-05, 49: 9.179115295410156e-05, 50: 0.0003638267517089844, 51: 0.0025222301483154297, 52: 0.00010538101196289062, 53: 4.4345855712890625e-05, 54: 7.2479248046875e-05, 55: 0.00017547607421875, 56: 0.0006146430969238281, 57: 0.0001327991485595703, 58: 0.0005133152008056641, 59: 0.0001392364501953125, 60: 0.0005490779876708984, 61: 9.608268737792969e-05, 62: 0.0002543926239013672, 63: 0.0002307891845703125, 64: 0.0009455680847167969, 65: 0.0003829002380371094, 66: 8.797645568847656e-05, 67: 3.361701965332031e-05, 68: 0.00017404556274414062, 69: 3.8623809814453125e-05, 70: 0.00033783912658691406, 71: 0.00031375885009765625, 72: 0.0012161731719970703, 73: 0.0009050369262695312, 74: 6.866455078125e-05, 75: 0.0001647472381591797, 76: 0.00016117095947265625, 77: 0.0003104209899902344, 78: 0.0001990795135498047, 79: 3.647804260253906e-05, 80: 0.0003552436828613281, 81: 0.0006899833679199219, 82: 0.00017690658569335938, 83: 0.00011301040649414062, 84: 8.344650268554688e-05, 85: 0.0003254413604736328, 86: 6.365776062011719e-05, 87: 0.0005400180816650391, 88: 0.0023806095123291016, 89: 7.534027099609375e-05, 90: 6.723403930664062e-05, 91: 0.0005743503570556641, 92: 8.535385131835938e-05, 93: 0.0017864704132080078, 94: 0.00012159347534179688, 95: 0.00022912025451660156, 96: 5.221366882324219e-05, 97: 0.00020599365234375, 98: 0.0001366138458251953, 99: 0.0009007453918457031, 100: 0.0001633167266845703, 101: 0.0003807544708251953, 102: 8.106231689453125e-05, 103: 0.00021648406982421875, 104: 0.00017070770263671875, 105: 0.00011968612670898438, 106: 0.0005848407745361328, 107: 0.00012111663818359375, 108: 0.00011134147644042969, 109: 0.00024390220642089844, 110: 0.00020503997802734375, 111: 5.14984130859375e-05, 112: 0.00012922286987304688, 113: 9.632110595703125e-05, 114: 0.0008158683776855469, 115: 0.0003323554992675781, 116: 0.0004887580871582031, 117: 0.0009708404541015625, 118: 4.458427429199219e-05, 119: 7.414817810058594e-05, 120: 9.560585021972656e-05, 121: 0.00012087821960449219, 122: 0.0006246566772460938, 123: 6.771087646484375e-05, 124: 9.703636169433594e-05, 125: 5.2928924560546875e-05, 126: 0.0004172325134277344, 127: 0.00016927719116210938, 128: 0.0006840229034423828, 129: 0.00023651123046875, 130: 9.703636169433594e-05, 131: 0.00019216537475585938, 132: 0.0011153221130371094, 133: 0.00016307830810546875, 134: 0.0001327991485595703, 135: 6.723403930664062e-05, 136: 3.933906555175781e-05, 137: 0.00010585784912109375, 138: 0.00012159347534179688, 139: 9.1552734375e-05, 140: 0.00022935867309570312, 141: 0.0009016990661621094, 142: 9.34600830078125e-05, 143: 0.0003440380096435547, 144: 0.0020318031311035156, 145: 0.0004930496215820312, 146: 0.00043129920959472656, 147: 5.125999450683594e-05, 148: 0.002622842788696289, 149: 0.00015926361083984375, 150: 5.0067901611328125e-05, 151: 5.9604644775390625e-05, 152: 9.131431579589844e-05, 153: 9.250640869140625e-05, 154: 0.00023102760314941406, 155: 5.269050598144531e-05, 156: 0.00019478797912597656, 157: 0.0002799034118652344, 158: 0.0005896091461181641, 159: 0.00033783912658691406, 160: 7.724761962890625e-05, 161: 0.0004277229309082031, 162: 0.00010013580322265625, 163: 0.00039887428283691406, 164: 0.0008220672607421875, 165: 0.0001418590545654297, 166: 0.0003094673156738281, 167: 0.0009832382202148438, 168: 0.0006172657012939453, 169: 0.0001442432403564453, 170: 0.00027060508728027344, 171: 0.0001842975616455078, 172: 2.8848648071289062e-05, 173: 5.602836608886719e-05, 174: 6.008148193359375e-05, 175: 0.0007979869842529297, 176: 0.0005929470062255859, 177: 0.0002808570861816406, 178: 0.0003681182861328125, 179: 0.000324249267578125, 180: 0.0001685619354248047, 181: 4.482269287109375e-05, 182: 0.0002162456512451172, 183: 3.9577484130859375e-05, 184: 0.00015735626220703125, 185: 0.0001442432403564453, 186: 0.00016760826110839844, 187: 0.0005891323089599609, 188: 0.00010609626770019531, 189: 3.457069396972656e-05, 190: 0.0003781318664550781, 191: 9.965896606445312e-05, 192: 0.0004124641418457031, 193: 0.0005295276641845703, 194: 0.0001327991485595703, 195: 0.0001590251922607422, 196: 3.8623809814453125e-05, 197: 0.00046944618225097656, 198: 9.489059448242188e-05, 199: 0.00010538101196289062, 200: 0.000705718994140625, 201: 0.00012159347534179688, 202: 4.4345855712890625e-05, 203: 8.940696716308594e-05, 204: 0.0011401176452636719, 205: 0.00018596649169921875, 206: 0.0010597705841064453, 207: 3.695487976074219e-05, 208: 6.604194641113281e-05, 209: 7.295608520507812e-05, 210: 0.00011539459228515625, 211: 4.0531158447265625e-05, 212: 0.0001537799835205078, 213: 4.744529724121094e-05, 214: 0.00013947486877441406, 215: 0.00011563301086425781, 216: 7.295608520507812e-05, 217: 0.00013780593872070312, 218: 0.00012183189392089844, 219: 0.00012946128845214844, 220: 3.6716461181640625e-05, 221: 0.00010967254638671875, 222: 5.555152893066406e-05, 223: 0.0008809566497802734, 224: 0.00030541419982910156, 225: 0.0002956390380859375, 226: 9.083747863769531e-05, 227: 0.0002422332763671875, 228: 4.267692565917969e-05, 229: 7.987022399902344e-05, 230: 0.00012826919555664062, 231: 7.271766662597656e-05, 232: 0.0001437664031982422, 233: 4.792213439941406e-05, 234: 7.796287536621094e-05, 235: 0.0005674362182617188, 236: 0.0013349056243896484, 237: 0.0003039836883544922, 238: 0.00011992454528808594, 239: 0.00010704994201660156, 240: 9.441375732421875e-05, 241: 0.0009968280792236328, 242: 5.030632019042969e-05, 243: 0.001165628433227539, 244: 0.00011181831359863281, 245: 0.0008883476257324219, 246: 5.125999450683594e-05, 247: 0.0007138252258300781, 248: 0.0010800361633300781, 249: 4.744529724121094e-05, 250: 0.00014448165893554688, 251: 0.00017595291137695312, 252: 6.127357482910156e-05, 253: 0.0001513957977294922, 254: 4.220008850097656e-05, 255: 0.0001957416534423828, 256: 6.413459777832031e-05, 257: 0.0002582073211669922, 258: 4.887580871582031e-05, 259: 0.0001983642578125, 260: 0.0005514621734619141, 261: 0.0003223419189453125, 262: 0.00019073486328125, 263: 8.392333984375e-05, 264: 0.0004734992980957031, 265: 0.0001595020294189453, 266: 0.00014257431030273438, 267: 7.343292236328125e-05, 268: 0.00011205673217773438, 269: 0.00014781951904296875, 270: 3.4332275390625e-05, 271: 3.719329833984375e-05, 272: 6.747245788574219e-05, 273: 6.818771362304688e-05, 274: 0.000392913818359375, 275: 0.0002589225769042969, 276: 0.00012350082397460938, 277: 9.703636169433594e-05, 278: 0.0024423599243164062, 279: 6.818771362304688e-05, 280: 0.000377655029296875, 281: 0.0002913475036621094, 282: 3.743171691894531e-05, 283: 0.0004334449768066406, 284: 0.00037479400634765625, 285: 0.0002124309539794922, 286: 0.00022268295288085938, 287: 0.0004584789276123047, 288: 4.935264587402344e-05, 289: 0.00023698806762695312, 290: 5.650520324707031e-05, 291: 0.000982046127319336, 292: 4.7206878662109375e-05, 293: 0.0001685619354248047, 294: 0.0039865970611572266, 295: 0.0020966529846191406, 296: 0.0003249645233154297, 297: 0.00015735626220703125, 298: 8.58306884765625e-05, 299: 4.673004150390625e-05, 300: 0.00032782554626464844, 301: 0.004884481430053711, 302: 0.00087251281738281, 303: 0.0002968311309814453, 304: 0.0002117156982421875, 305: 0.0017542839050292969, 306: 0.0023615360260009766, 307: 0.00042700767517089844, 308: 0.00010442733764648438, 309: 0.00013494491577148438, 310: 9.298324584960938e-05, 311: 0.00016307830810546875, 312: 0.00028777122497558594, 313: 0.00024127960205078125, 314: 4.601478576660156e-05, 315: 0.00021338462829589844, 316: 0.001837154388427734, 317: 0.00023508071899414062, 318: 8.440017700195312e-05, 319: 0.0007262229919433594, 320: 0.0003829002380371094, 321: 0.00014901161193847656, 322: 5.7697296142578125e-05, 323: 7.939338684082031e-05, 324: 9.107589721679688e-05, 325: 0.00026702880859375, 326: 8.416175842285156e-05, 327: 0.0002837181091308594, 328: 0.0001468658447265625, 329: 4.100799560546875e-05, 330: 7.653236389160156e-05, 331: 4.00543212890625e-05, 332: 0.00014638900756835938, 333: 0.00014591217041015625, 334: 0.00010728836059570312, 335: 0.00010180473327636719, 336: 0.0001544952392578125, 337: 8.916854858398438e-05, 338: 0.00020933151245117188, 339: 0.0008578300476074219, 340: 0.0001366138458251953, 341: 0.000171661376953125, 342: 9.632110595703125e-05, 343: 0.0012760162353515625, 344: 8.082389831542969e-05, 345: 0.00016450881958007812, 346: 6.723403930664062e-05, 347: 0.00010466575622558594, 348: 7.963180541992188e-05, 349: 5.793571472167969e-05, 350: 7.772445678710938e-05, 351: 8.249282836914062e-05, 352: 0.0005471706390380859, 353: 0.00016951560974121094, 354: 5.1975250244140625e-05, 355: 0.0019845962524414062, 356: 8.153915405273438e-05, 357: 6.508827209472656e-05, 358: 0.00016045570373535156, 359: 4.57763671875e-05, 360: 0.0003020763397216797, 361: 0.00028443336486816406, 362: 4.124641418457031e-05, 363: 0.00012826919555664062, 364: 0.0003426074981689453, 365: 0.00021457672119140625, 366: 0.00014257431030273438, 367: 4.363059997558594e-05, 368: 0.0018458366394042969, 369: 0.0006031990051269531, 370: 8.320808410644531e-05, 371: 0.002261638641357422, 372: 0.00021195411682128906, 373: 0.001314401626586914, 374: 0.0002968311309814453, 375: 0.0018346309661865234, 376: 0.0017809867858886719, 377: 0.00011014938354492188, 378: 0.00047326087951660156, 379: 0.0007107257843017578, 380: 0.0008695125579833984, 381: 0.0009129047393798828, 382: 0.0013768672943115234, 383: 0.00048065185546875, 384: 5.745887756347656e-05, 385: 0.00019097328186035156, 386: 0.00014257431030273438, 387: 0.00016689300537109375, 388: 0.00014972686767578125, 389: 0.00014829635620117188, 390: 8.034706115722656e-05, 391: 0.00010895729064941406, 392: 0.002082347869873047, 393: 6.341934204101562e-05, 394: 0.0008218288421630859, 395: 0.00022840499877929688, 396: 0.0012733936309814453, 397: 0.00019288063049316406, 398: 0.00013136863708496094, 399: 0.00033211708068847656}

#Dijkstra

# {0: 0, 1: 0.005881309509277344, 2: 0.05082559585571289, 3: 0.0027153491973876953, 4: 0.0009696483612060547, 5: 0.013809919357299805, 6: 0.0005097389221191406, 7: 0.0025768280029296875, 8: 0.00012755393981933594, 9: 0.00025963783264160156, 10: 0.002798795700073242, 11: 0.0007565021514892578, 12: 0.0012204647064208984, 13: 0.0028138160705566406, 14: 0.0003266334533691406, 15: 0.0001895427703857422, 16: 0.0049097537994384766, 17: 0.0008339881896972656, 18: 0.033986568450927734, 19: 0.011655330657958984, 20: 0.0038805007934570312, 21: 0.0055315494537353516, 22: 0.0022416114807128906, 23: 0.0052013397216796875, 24: 0.0007331371307373047, 25: 0.05150413513183594, 26: 0.005167245864868164, 27: 0.02487635612487793, 28: 0.0004069805145263672, 29: 0.00021076202392578125, 30: 0.007581472396850586, 31: 0.0011138916015625, 32: 0.008273601531982422, 33: 0.00640869140625, 34: 0.00024247169494628906, 35: 0.0002243518829345703, 36: 0.0005500316619873047, 37: 0.0010843276977539062, 38: 0.07147979736328125, 39: 0.0008900165557861328, 40: 0.014472007751464844, 41: 0.013723611831665039, 42: 0.003332853317260742, 43: 0.0009584426879882812, 44: 0.002075672149658203, 45: 0.0017635822296142578, 46: 0.016055583953857422, 47: 0.0008440017700195312, 48: 0.0009517669677734375, 49: 0.003248453140258789, 50: 0.00019741058349609375, 51: 0.006154775619506836, 52: 0.0003123283386230469, 53: 0.001068115234375, 54: 0.0018680095672607422, 55: 0.000896453857421875, 56: 0.0400393009185791, 57: 0.0007171630859375, 58: 0.0006318092346191406, 59: 0.0007185935974121094, 60: 0.01592564582824707, 61: 0.0047740936279296875, 62: 0.0005769729614257812, 63: 0.007884740829467773, 64: 0.002911806106567383, 65: 0.00081634521484375, 66: 0.005368232727050781, 67: 0.00038313865661621094, 68: 0.0004017353057861328, 69: 0.010440826416015625, 70: 0.00019049644470214844, 71: 0.0050203800201416016, 72: 0.001226663589477539, 73: 0.00032329559326171875, 74: 0.0014712810516357422, 75: 0.003591299057006836, 76: 0.0012547969818115234, 77: 0.009857416152954102, 78: 0.011442422866821289, 79: 0.005276918411254883, 80: 0.004641532897949219, 81: 0.00024628639221191406, 82: 0.0003657341003417969, 83: 0.00016307830810546875, 84: 0.0009655952453613281, 85: 0.00015163421630859375, 86: 0.003930807113647461, 87: 0.008260726928710938, 88: 0.0013921260833740234, 89: 0.0011687278747558594, 90: 0.008934497833251953, 91: 0.01619863510131836, 92: 0.0004978179931640625, 93: 0.001306772232055664, 94: 0.004044294357299805, 95: 0.009087324142456055, 96: 0.000843048095703125, 97: 0.0074498653411865234, 98: 0.022420644760131836, 99: 0.0032999515533447266, 100: 0.0001304149627685547, 101: 0.00045561790466308594, 102: 0.0007655620574951172, 103: 0.0031239986419677734, 104: 0.007668495178222656, 105: 0.0049800872802734375, 106: 0.0198366641998291, 107: 0.0010097026824951172, 108: 0.0014081001281738281, 109: 0.031145334243774414, 110: 0.03235983848571777, 111: 0.0106353759765625, 112: 0.0017533302307128906, 113: 0.0002715587615966797, 114: 0.002408742904663086, 115: 0.0014553070068359375, 116: 0.00976872444152832, 117: 0.019254684448242188, 118: 0.0062716007232666016, 119: 0.0007009506225585938, 120: 0.0016813278198242188, 121: 0.0005323886871337891, 122: 0.00026345252990722656, 123: 0.007005929946899414, 124: 0.0016620159149169922, 125: 0.0008161067962646484, 126: 0.0005514621734619141, 127: 0.03438520431518555, 128: 0.004525899887084961, 129: 0.0001990795135498047, 130: 0.004297733306884766, 131: 0.0006718635559082031, 132: 0.0003490447998046875, 133: 0.0003387928009033203, 134: 0.004392147064208984, 135: 0.0013928413391113281, 136: 0.004871368408203125, 137: 0.00028586387634277344, 138: 0.003539562225341797, 139: 0.002521514892578125, 140: 0.01105642318725586, 141: 0.0003731250762939453, 142: 0.004571199417114258, 143: 0.03532052040100098, 144: 0.013867855072021484, 145: 0.0005266666412353516, 146: 0.005591392517089844, 147: 0.02103710174560547, 148: 0.045007944107055664, 149: 0.00042510032653808594, 150: 0.0034623146057128906, 151: 0.00038909912109375, 152: 0.0003666877746582031, 153: 0.0001881122589111328, 154: 0.001970052719116211, 155: 0.0036351680755615234, 156: 0.0008349418640136719, 157: 0.002227783203125, 158: 0.05676531791687012, 159: 0.00831294059753418, 160: 0.0013418197631835938, 161: 0.0016770362854003906, 162: 0.0013623237609863281, 163: 0.00020813941955566406, 164: 0.007669687271118164, 165: 0.00017786026000976562, 166: 0.0004756450653076172, 167: 0.00194549560546875, 168: 0.007146358489990234, 169: 0.0004134178161621094, 170: 0.00041937828063964844, 171: 0.0012123584747314453, 172: 0.05624270439147949, 173: 0.0031728744506835938, 174: 0.00046706199645996094, 175: 0.0008237361907958984, 176: 0.007653713226318359, 177: 0.000598907470703125, 178: 0.02356719970703125, 179: 0.004319429397583008, 180: 0.0007643699645996094, 181: 0.0010044574737548828, 182: 0.008747339248657227, 183: 0.02080845832824707, 184: 0.01447296142578125, 185: 0.0007669925689697266, 186: 0.0009551048278808594, 187: 0.004271745681762695, 188: 0.001969575881958008, 189: 0.0002853870391845703, 190: 0.0002846717834472656, 191: 0.0020599365234375, 192: 0.002855539321899414, 193: 0.0030994415283203125, 194: 0.000118255615234375, 195: 0.005800962448120117, 196: 0.007462978363037109, 197: 0.019544363021850586, 198: 0.0006299018859863281, 199: 0.008866310119628906, 200: 0.00518488883972168, 201: 0.005814075469970703, 202: 0.006857633590698242, 203: 0.002413511276245117, 204: 0.00021386146545410156, 205: 0.0036737918853759766, 206: 0.0033867359161376953, 207: 0.019208192825317383, 208: 0.005272388458251953, 209: 0.0007665157318115234, 210: 0.025977134704589844, 211: 0.0008220672607421875, 212: 0.0003743171691894531, 213: 0.007450103759765625, 214: 0.0004029273986816406, 215: 0.00017189979553222656, 216: 0.00024366378784179688, 217: 0.006532907485961914, 218: 0.002644777297973633, 219: 0.0016689300537109375, 220: 0.016942977905273438, 221: 0.021920204162597656, 222: 0.017608165740966797, 223: 0.024514198303222656, 224: 0.004809379577636719, 225: 0.00028824806213378906, 226: 0.0013811588287353516, 227: 0.004157304763793945, 228: 0.0029964447021484375, 229: 0.0009417533874511719, 230: 0.012122631072998047, 231: 0.00020051002502441406, 232: 0.037850379943847656, 233: 0.004161357879638672, 234: 0.0003218650817871094, 235: 0.00039839744567871094, 236: 0.0004172325134277344, 237: 0.0018892288208007812, 238: 0.0016455650329589844, 239: 0.007848262786865234, 240: 0.0058879852294921875, 241: 0.015265226364135742, 242: 0.002635478973388672, 243: 0.0036127567291259766, 244: 0.0006306171417236328, 245: 0.0005428791046142578, 246: 0.001781463623046875, 247: 0.001642465591430664, 248: 0.0009927749633789062, 249: 0.0003407001495361328, 250: 0.022031307220458984, 251: 0.0012063980102539062, 252: 0.005225181579589844, 253: 0.03294992446899414, 254: 0.008405923843383789, 255: 0.0013744831085205078, 256: 0.006667613983154297, 257: 0.003226041793823242, 258: 0.0062978267669677734, 259: 0.0005311965942382812, 260: 0.0004305839538574219, 261: 0.0005524158477783203, 262: 0.0009832382202148438, 263: 0.0012295246124267578, 264: 0.014804601669311523, 265: 0.002099752426147461, 266: 0.005675792694091797, 267: 0.0075893402099609375, 268: 0.009614229202270508, 269: 0.0003859996795654297, 270: 0.0028853416442871094, 271: 0.0010075569152832031, 272: 0.0008568763732910156, 273: 0.03877758979797363, 274: 0.002066373825073242, 275: 0.035923004150390625, 276: 0.000270843505859375, 277: 0.00023865699768066406, 278: 0.02169513702392578, 279: 0.014331340789794922, 280: 0.026360034942626953, 281: 0.0007941722869873047, 282: 0.00023174285888671875, 283: 0.007314205169677734, 284: 0.007135629653930664, 285: 0.001604318618774414, 286: 0.004397869110107422, 287: 0.0004074573516845703, 288: 0.013857841491699219, 289: 0.0018930435180664062, 290: 0.0018992424011230469, 291: 0.0007197856903076172, 292: 0.009255409240722656, 293: 0.05056309700012207, 294: 0.003795146942138672, 295: 0.0002853870391845703, 296: 0.020962238311767578, 297: 0.004422664642333984, 298: 0.017982006072998047, 299: 0.008492469787597656, 300: 0.010081291198730469, 301: 0.014385223388671875, 302: 0.015316486358642578, 303: 0.0007092952728271484, 304: 0.013031482696533203, 305: 0.006890535354614258, 306: 0.007878780364990234, 307: 0.0005018711090087891, 308: 0.011157035827636719, 309: 0.0002071857452392578, 310: 0.002268075942993164, 311: 0.0024938583374023438, 312: 0.00575709342956543, 313: 0.008592844009399414, 314: 0.0004153251647949219, 315: 0.0002522468566894531, 316: 0.013221025466918945, 317: 0.012815713882446289, 318: 0.003286123275756836, 319: 0.009204387664794922, 320: 0.0063800811767578125, 321: 0.00022149085998535156, 322: 0.002048969268798828, 323: 0.002599000930786133, 324: 0.005917549133300781, 325: 0.0026154518127441406, 326: 0.0036537647247314453, 327: 0.0015974044799804688, 328: 0.0005648136138916016, 329: 0.004374504089355469, 330: 0.0012629032135009766, 331: 0.00054931640625, 332: 0.0005457401275634766, 333: 0.00028324127197265625, 334: 0.0038917064666748047, 335: 0.003634214401245117, 336: 0.0016133785247802734, 337: 0.005849123001098633, 338: 0.0020270347595214844, 339: 0.0001385211944580078, 340: 0.04559016227722168, 341: 0.006052970886230469, 342: 0.0018908977508544922, 343: 0.0006754398345947266, 344: 0.001384735107421875, 345: 0.003515958786010742, 346: 0.003766298294067383, 347: 0.0031604766845703125, 348: 0.0017905235290527344, 349: 0.0020532608032226562, 350: 0.025997638702392578, 351: 0.0015773773193359375, 352: 0.007657289505004883, 353: 0.0004031658172607422, 354: 0.00038909912109375, 355: 0.004857301712036133, 356: 0.0006189346313476562, 357: 0.003038167953491211, 358: 0.0003428459167480469, 359: 0.0239410400390625, 360: 0.0031762123107910156, 361: 0.0001957416534423828, 362: 0.028237342834472656, 363: 0.0019207000732421875, 364: 0.008314847946166992, 365: 0.0003771781921386719, 366: 0.012958049774169922, 367: 0.0003170967102050781, 368: 0.00027942657470703125, 369: 0.0007252693176269531, 370: 0.004163265228271484, 371: 0.008767127990722656, 372: 0.0003185272216796875, 373: 0.01224064826965332, 374: 0.0012028217315673828, 375: 0.0012841224670410156, 376: 0.006516933441162109, 377: 0.00475001335144043, 378: 0.009120464324951172, 379: 0.0004780292510986328, 380: 0.0011210441589355469, 381: 0.005831003189086914, 382: 0.0007543563842773438, 383: 0.004243135452270508, 384: 0.0006504058837890625, 385: 0.001041412353515625, 386: 0.003725767135620117, 387: 0.04463028907775879, 388: 0.0006961822509765625, 389: 0.0004985332489013672, 390: 0.01785445213317871, 391: 0.0042421817779541016, 392: 0.006045341491699219, 393: 0.006052970886230469, 394: 0.0007669925689697266, 395: 0.006605863571166992, 396: 0.05572056770324707, 397: 0.0034117698669433594, 398: 0.0023546218872070312, 399: 0.00023674964904785156}


#Direct Tx

# {0: 0, 1: 0.0007061958312988281, 2: 0.00021839141845703125, 3: 0.0008466243743896484, 4: 0.0009109973907470703, 5: 0.00020623207092285156, 6: 0.0005719661712646484, 7: 0.00015807151794433594, 8: 0.0010824203491210938, 9: 0.0005376338958740234, 10: 0.00013899803161621094, 11: 0.0009047985076904297, 12: 0.0008692741394042969, 13: 0.0005271434783935547, 14: 0.001316070556640625, 15: 0.002087116241455078, 16: 0.00821828842163086, 17: 0.00882101058959961, 18: 0.00015091896057128906, 19: 0.0006859302520751953, 20: 0.00060272216796875, 21: 0.00014352798461914062, 22: 0.0026891231536865234, 23: 0.0003006458282470703, 24: 0.0002799034118652344, 25: 0.0007410049438476562, 26: 0.0011210441589355469, 27: 0.0002181529998779297, 28: 0.001825571060180664, 29: 0.018880128860473633, 30: 0.0004086494445800781, 31: 0.0005252361297607422, 32: 0.0002582073211669922, 33: 0.009688615798950195, 34: 0.0010292530059814453, 35: 0.0004496574401855469, 36: 0.00040435791015625, 37: 0.0003497600555419922, 38: 0.0003108978271484375, 39: 0.0007014274597167969, 40: 0.0008244514465332031, 41: 0.00045561790466308594, 42: 0.001863718032836914, 43: 0.0016252994537353516, 44: 0.001010894775390625, 45: 0.00014162063598632812, 46: 0.0010075569152832031, 47: 0.0013403892517089844, 48: 0.000179290771484375, 49: 0.0006659030914306641, 50: 0.0005476474761962891, 51: 0.0002956390380859375, 52: 0.008879899978637695, 53: 0.0007653236389160156, 54: 0.00018477439880371094, 55: 0.00043845176696777344, 56: 0.000133514404296875, 57: 0.0014407634735107422, 58: 0.00013375282287597656, 59: 0.0003261566162109375, 60: 0.0003604888916015625, 61: 0.00036334991455078125, 62: 0.0006284713745117188, 63: 0.00026869773864746094, 64: 0.001463174819946289, 65: 0.00034689903259277344, 66: 0.0005786418914794922, 67: 0.023964643478393555, 68: 0.0007233619689941406, 69: 0.0017426013946533203, 70: 0.0005605220794677734, 71: 0.0005230903625488281, 72: 0.0002620220184326172, 73: 0.0001270771026611328, 74: 0.0003752708435058594, 75: 0.0016832351684570312, 76: 0.0008652210235595703, 77: 0.0010614395141601562, 78: 0.00022149085998535156, 79: 0.004977703094482422, 80: 0.0006158351898193359, 81: 0.006727695465087891, 82: 0.004216432571411133, 83: 0.0015659332275390625, 84: 0.0024695396423339844, 85: 0.0007662773132324219, 86: 0.0002770423889160156, 87: 0.0015079975128173828, 88: 0.00043082237243652344, 89: 0.00015544891357421875, 90: 0.008195161819458008, 91: 0.0006537437438964844, 92: 0.0006797313690185547, 93: 0.0007441043853759766, 94: 0.0008144378662109375, 95: 0.00021791458129882812, 96: 0.0003154277801513672, 97: 0.0008890628814697266, 98: 0.0007367134094238281, 99: 0.00026917457580566406, 100: 0.0006031990051269531, 101: 0.0015761852264404297, 102: 0.0009493827819824219, 103: 0.0016226768493652344, 104: 0.0006077289581298828, 105: 0.0003294944763183594, 106: 0.0017027854919433594, 107: 0.0005817413330078125, 108: 0.0011887550354003906, 109: 0.017565488815307617, 110: 0.0001442432403564453, 111: 0.01520991325378418, 112: 0.0003974437713623047, 113: 0.0011224746704101562, 114: 0.001348257064819336, 115: 0.007722616195678711, 116: 0.0006554126739501953, 117: 0.0002009868621826172, 118: 0.0002338886260986328, 119: 0.0004336833953857422, 120: 0.0006129741668701172, 121: 0.00033283233642578125, 122: 0.001298666000366211, 123: 0.0001678466796875, 124: 0.000308990478515625, 125: 0.0009086132049560547, 126: 0.00034546852111816406, 127: 0.0009138584136962891, 128: 0.00022172927856445312, 129: 0.00018548965454101562, 130: 0.0011701583862304688, 131: 0.0004832744598388672, 132: 0.008708953857421875, 133: 0.0001819133758544922, 134: 0.0005474090576171875, 135: 0.00021028518676757812, 136: 0.0017185211181640625, 137: 0.0005807876586914062, 138: 0.00037097930908203125, 139: 0.0002930164337158203, 140: 0.0006017684936523438, 141: 0.0005502700805664062, 142: 0.00017881393432617188, 143: 0.0004138946533203125, 144: 0.0014498233795166016, 145: 0.0009319782257080078, 146: 0.003282308578491211, 147: 0.0003876686096191406, 148: 0.0002646446228027344, 149: 0.00016927719116210938, 150: 0.0006811618804931641, 151: 0.0005552768707275391, 152: 0.00029277801513671875, 153: 0.00032067298889160156, 154: 0.004870500564575195, 155: 0.001435995101928711, 156: 0.0006189346313476562, 157: 0.0008459091186523438, 158: 0.0015435218811035156, 159: 0.0009734630584716797, 160: 0.0008351802825927734, 161: 0.0013344287872314453, 162: 0.002302408218383789, 163: 0.0007283687591552734, 164: 0.00018072128295898438, 165: 0.00040078163146972656, 166: 0.0011138916015625, 167: 0.0003116130828857422, 168: 0.0002732276916503906, 169: 0.0006146430969238281, 170: 0.00029158592224121094, 171: 0.0003223419189453125, 172: 0.0068476200103759766, 173: 0.00024771690368652344, 174: 0.0010874271392822266, 175: 0.001535654067993164, 176: 0.0007107257843017578, 177: 0.0005338191986083984, 178: 0.00628972053527832, 179: 0.0002617835998535156, 180: 0.0005738735198974609, 181: 0.00025582313537597656, 182: 0.0005362033843994141, 183: 0.0003178119659423828, 184: 0.0010478496551513672, 185: 0.000148773193359375, 186: 0.0002951622009277344, 187: 0.0003218650817871094, 188: 0.0006625652313232422, 189: 0.0006661415100097656, 190: 0.002938985824584961, 191: 0.0003428459167480469, 192: 0.0014510154724121094, 193: 0.0056531429290771484, 194: 0.0196683406829834, 195: 0.0007185935974121094, 196: 0.00020742416381835938, 197: 0.0010268688201904297, 198: 0.0012142658233642578, 199: 0.0019009113311767578, 200: 0.0006630420684814453, 201: 0.0008499622344970703, 202: 0.0014641284942626953, 203: 0.0011830329895019531, 204: 0.00020360946655273438, 205: 0.00026726722717285156, 206: 0.0009636878967285156, 207: 0.00046253204345703125, 208: 0.00033164024353027344, 209: 0.0026383399963378906, 210: 0.0007317066192626953, 211: 0.0006392002105712891, 212: 0.0007641315460205078, 213: 0.003805398941040039, 214: 0.0016505718231201172, 215: 0.00013899803161621094, 216: 0.0007593631744384766, 217: 0.00023889541625976562, 218: 0.00034236907958984375, 219: 0.0005738735198974609, 220: 0.0002346038818359375, 221: 0.00046753883361816406, 222: 0.0002117156982421875, 223: 0.00016069412231445312, 224: 0.0012359619140625, 225: 0.0003464221954345703, 226: 0.0005815029144287109, 227: 0.0001983642578125, 228: 0.00033664703369140625, 229: 0.008834362030029297, 230: 0.00026488304138183594, 231: 0.0002391338348388672, 232: 0.0021245479583740234, 233: 0.0016057491302490234, 234: 0.001802682876586914, 235: 0.00033020973205566406, 236: 0.00026226043701171875, 237: 0.0012755393981933594, 238: 0.0013303756713867188, 239: 0.0009357929229736328, 240: 0.0004684925079345703, 241: 0.0005676746368408203, 242: 0.001466989517211914, 243: 0.01134943962097168, 244: 0.0004584789276123047, 245: 0.000431060791015625, 246: 0.0005447864532470703, 247: 0.0013837814331054688, 248: 0.00017571449279785156, 249: 0.00014257431030273438, 250: 0.00054931640625, 251: 0.00012040138244628906, 252: 0.0006892681121826172, 253: 0.0016238689422607422, 254: 0.00015425682067871094, 255: 0.00037980079650878906, 256: 0.00095367431640625, 257: 0.0005714893341064453, 258: 0.0004115104675292969, 259: 0.0005657672882080078, 260: 0.0016665458679199219, 261: 0.00079345703125, 262: 0.0008900165557861328, 263: 0.012915849685668945, 264: 0.0010123252868652344, 265: 0.0006368160247802734, 266: 0.0012600421905517578, 267: 0.0008697509765625, 268: 0.0008997917175292969, 269: 0.0012087821960449219, 270: 0.0077667236328125, 271: 0.0014584064483642578, 272: 0.0010561943054199219, 273: 0.00037860870361328125, 274: 0.00019288063049316406, 275: 0.00617527961730957, 276: 0.00027251243591308594, 277: 0.00926351547241211, 278: 0.0003719329833984375, 279: 0.005309343338012695, 280: 0.0006656646728515625, 281: 0.0006883144378662109, 282: 0.0003566741943359375, 283: 0.00033020973205566406, 284: 0.00037217140197753906, 285: 0.0007202625274658203, 286: 0.00045371055603027344, 287: 0.0007207393646240234, 288: 0.010167121887207031, 289: 0.0002582073211669922, 290: 0.0003039836883544922, 291: 0.0002758502960205078, 292: 0.0009512901306152344, 293: 0.003384113311767578, 294: 0.0013587474822998047, 295: 0.00027489662170410156, 296: 0.00036716461181640625, 297: 0.0006339550018310547, 298: 0.0018253326416015625, 299: 0.0004668235778808594, 300: 0.0007531642913818359, 301: 0.0001475811004638672, 302: 0.0003616809844970703, 303: 0.0073854923248291016, 304: 0.0002532005310058594, 305: 0.0010728836059570312, 306: 0.0001316070556640625, 307: 0.0006844997406005859, 308: 0.0010120868682861328, 309: 0.0007266998291015625, 310: 0.0011801719665527344, 311: 0.0003185272216796875, 312: 0.0007698535919189453, 313: 0.00019288063049316406, 314: 0.00014400482177734375, 315: 0.0015594959259033203, 316: 0.0008904933929443359, 317: 0.00033926963806152344, 318: 0.0005550384521484375, 319: 0.0001811981201171875, 320: 0.0012862682342529297, 321: 0.0016994476318359375, 322: 0.0007650852203369141, 323: 0.006382942199707031, 324: 0.0006747245788574219, 325: 0.00024509429931640625, 326: 0.0015473365783691406, 327: 0.00030612945556640625, 328: 0.0016512870788574219, 329: 0.0003712177276611328, 330: 0.0006783008575439453, 331: 0.0007042884826660156, 332: 0.0005810260772705078, 333: 0.00037860870361328125, 334: 0.0003044605255126953, 335: 0.00869441032409668, 336: 0.0002224445343017578, 337: 0.0011610984802246094, 338: 0.00015783309936523438, 339: 0.0157773494720459, 340: 0.002725362777709961, 341: 0.0019073486328125, 342: 0.001821279525756836, 343: 0.0010004043579101562, 344: 0.0006244182586669922, 345: 0.0001494884490966797, 346: 0.0006167888641357422, 347: 0.0015790462493896484, 348: 0.0006690025329589844, 349: 0.0004658699035644531, 350: 0.0005030632019042969, 351: 0.00034308433532714844, 352: 0.0011475086212158203, 353: 0.00843667984008789, 354: 0.014299869537353516, 355: 0.0010881423950195312, 356: 0.0003829002380371094, 357: 0.0018229484558105469, 358: 0.0010707378387451172, 359: 0.00020194053649902344, 360: 0.0017952919006347656, 361: 0.0002148151397705078, 362: 0.0006453990936279297, 363: 0.0004601478576660156, 364: 0.010897397994995117, 365: 0.0009720325469970703, 366: 0.004166603088378906, 367: 0.0005767345428466797, 368: 0.0007534027099609375, 369: 0.0008103847503662109, 370: 0.0004887580871582031, 371: 0.0005750656127929688, 372: 0.0006654262542724609, 373: 0.0012583732604980469, 374: 0.0007855892181396484, 375: 0.0007877349853515625, 376: 0.0001201629638671875, 377: 0.0006570816040039062, 378: 0.0003027915954589844, 379: 0.0006794929504394531, 380: 0.0005373954772949219, 381: 0.0012319087982177734, 382: 0.0007364749908447266, 383: 0.0004978179931640625, 384: 0.001962423324584961, 385: 0.00022840499877929688, 386: 0.0005540847778320312, 387: 0.00036787986755371094, 388: 0.0002930164337158203, 389: 0.00016570091247558594, 390: 0.0002033710479736328, 391: 0.00028586387634277344, 392: 0.00026154518127441406, 393: 0.00014853477478027344, 394: 0.0005679130554199219, 395: 0.001173257827758789, 396: 0.0013265609741210938, 397: 0.00017380714416503906, 398: 0.0001773834228515625, 399: 0.0007913112640380859}